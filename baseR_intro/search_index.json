[
["index.html", "Introduction to Base R Preface 0.1 Data files", " Introduction to Base R 2020-10-26 Preface This introduction to base R course was designed for biologists with no previous programming experience. It has a focus on analysing RNA-sequencing data using the Bioconductor package limma. The F1000 paper ‘RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR’ was used as a guide for the later sessions. It is intended to be delivered over four 2.5 hour workshops at the Walter and Eliza Hall Institute of Medical Research (WEHI). 0.1 Data files You can download and unzip the files using the following commands download.file(&quot;https://github.com/Shians/BaseR_Intro/raw/master/data/workshop_data.zip&quot;, &quot;workshop_data.zip&quot;) unzip(&quot;workshop_data.zip&quot;, exdir = &quot;data&quot;) unzip(&quot;data/Ses3_counts.zip&quot;, exdir = &quot;data/counts&quot;) Acknowledgements This course material was originally produced by Lucy Liu and later modified by Shian Su. Thanks to Brendan Ansell and Professor Gordon Smyth for your suggestions and review of this tutorial. This page was generated using the bookdown package by YiHui Xie. The source code for this page can be found on Github. "],
["session-1.html", "Chapter 1 Session 1 1.1 R and RStudio 1.2 R scripts 1.3 Working directory 1.4 Maths 1.5 Comparisons 1.6 Functions 1.7 Variables 1.8 Data types 1.9 Data structures 1.10 Reading in data 1.11 Vectorised Operations 1.12 Writing out data", " Chapter 1 Session 1 In this first session we will learn about: R and RStudio Data types and data structures Vectorised operations Data input and output 1.1 R and RStudio R is a free and open source statistical programming language, great for performing data analysis. RStudio is a free and open source R integrated development environment (IDE) which makes it easier for you to write code. It does this by providing you with auto-completion (of variable names, function names, file paths etc.), helping with formatting and keeping track of your variables. You can think of R as the engine in a car and RStudio as the body &amp; controls. R is doing all the calculations/computations but RStudio makes it easier for you to use R. When you first open RStudio, there will be three panels - see Figure 1.1 (don’t worry if your RStudio does not have the same colours/appearance - different versions of RStudio look slightly different, and the colour here is not the default one.) Figure 1.1: Three panels in RStudio. Left panel: this panel features two tabs, ‘Console’, which is where you can type in commands for R to run and ‘Terminal’, which we won’t worry about in this course. Top right panel: Environment - in this tab you can see all variables you have created. History - R keeps track of all commands you have run and you can review them in this tab. Connections - this tab helps you connect to data sources but we will not be using it in this course. Bottom right: Files - you can explore your file directory here and we will use it to set our working directory later. Plots - plots that you create will either appear here or be saved to a file. Help - help files for R functions can be viewed in this tab. Help files tell you about what a function does and how to use it. Packages - basic R includes many useful functions. You can add even more functions by downloading packages. A package is a collection of functions, generally with a certain data analysis theme. For example, the package ‘limma’, which we will use later, includes functions for analysing RNA-sequencing data. Viewer - this tab lets you view local web content but we won’t be using it in this course. 1.2 R scripts To open an R script, go to File &gt; New File &gt; R Script. Figure 1.2: Opening a new R Script. This will open a fourth panel on the top left. Figure 1.3: Four panels, including a R Script. An R script is a text document where can type and run commands. You can also run commands in the console but the code run in the console is not saved. Note that to run a command in the Console press Enter key but to run a command in a R Script you must press Cmd/Ctrl + Enter keys. Lastly, you add ‘comments’ in your R Script. Comments are notes regarding the code that are not interpreted by R, they begin with #: # this is a note to myself 1 + 1 ## [1] 2 1.3 Working directory Every file on your computer is located in a specific location. This location can be referred to by a path. In Mac, paths look something like this: /Users/Lucy/Documents/. In Windows, paths look something like this: C:\\Users\\Lucy\\Documents\\. When you open an R session, it launches from a specific location. You can find out where this is using the command getwd(). This location is called the ‘working directory’. By default, R will look in this directory when reading in data and write out files/plots to this directory. It is often useful to have your data and R Scripts in the same directory and set this as your working directory. You can set your working directory to be anywhere you like and we will now do this: Make a folder for this course, somewhere sensible on your computer that you will be able to easily find. Go back to your RStudio window, go to the bottom right panel, click on the ‘Files’ tab and then click on the three dots on the top right hand corner (Figure 1.4). Figure 1.4: Setting the working directory - 1. This will open up a new window (Figure 1.5) which lets you explore the files and folders on your computer. Find the new folder you created, click on it then click ‘Open’. Figure 1.5: Setting the working directory - 2. The files tab will now show the contents of your new folder (which should be empty). At the top of the files tab, click on More &gt; Set As Working Directory (Figure 1.6). Figure 1.6: Setting the working directory - 3. Please set your working directory to be this folder at the start of EVERY session. 1.4 Maths R performs maths and follows standard order of operations. In order of highest to lowest precedence, here is how mathematical operations are denoted in R: () - parentheses ^ or ** - exponents / - divide * - multiply + - add - - subtract %% - remainder (modulus) 1 + 2 ## [1] 3 1 + 3 * 4 ## [1] 13 (1 + 3) * 4 ## [1] 16 10 %% 3 ## [1] 1 1.5 Comparisons R can perform comparisons: == equal to. != not equal to. &gt; greater than. &gt;= greater or equal to. &lt; less than. &lt;= less than or equal to. These operations return a TRUE or a FALSE value. This can be used to quickly summarise data or perform indexing as we will see later. 10 &gt; 10 # FALSE ## [1] FALSE 10 &gt;= 10 # TRUE ## [1] TRUE You can also compare words. R will use dictionary order to determine which word is ‘greater’. &quot;cat&quot; &gt; &quot;dog&quot; ## [1] FALSE 1.6 Functions Functions are expression in R that take inputs and produce outputs. Functions may take multiple inputs, also called ‘arguments’ to the function, each argument must be separated by comma. Arguments have a set order in which they can be given, or they can be referred to specifically by their name. pi ## [1] 3.141593 round(pi, digits = 3) ## [1] 3.142 Many arguments have default values so you don’t need to specify every argument for every function. You can check the arguments of a function by using args(). args(rnorm) ## function (n, mean = 0, sd = 1) ## NULL Sometimes it’s obvious what the arguments are, but if more details are needed then you can access the help pages. This can be one in one of two ways, by searching for the function in the help panel. Figure 1.7: Accessing help files via ‘help’ tab. Or using the command ? followed by the name of the function: ?sum Help files are very useful but can be difficult to interpret at first due to the technical language used. It is often helpful to scroll down to the bottom to see examples of how the function is used. 1.7 Variables A variable in R is an identifier to keep track of values. We assign values to variables so that we can refer to the variable later. For example, I can do some maths: 2 + 6 * 7^2 ## [1] 296 R outputs simply the result. To use this value later, I would need to assign the output to a variable. You can this with &lt;- (shortcut = alt + -) in R. (You can also use =, however, stylistically &lt;- is preferred.) Here R first performs the calculation on the right of &lt;- and then saves the result as a variable called my_num. my_num &lt;- 2 + 6 * 7^2 my_num # 296 ## [1] 296 Note that variable names are case sensitive. var &lt;- 10 VAR # produces error because VAR is not the same as var ## Error in eval(expr, envir, enclos): object &#39;VAR&#39; not found You can also ‘overwrite’ variables by assigning to them again: my_num &lt;- 3 * 4 my_num # 12 ## [1] 12 Because the right hand side is evaluated first, you can also assign to a variable a calculation that involves itself. my_num &lt;- my_num + 5 my_num # 17 ## [1] 17 R has rules on valid variable names. Variable names can only contain letters, numbers, the dot or underline characters. They can only start with a letter or the dot followed by a letter. If we try to create a variable that starts with a number, R will return an error: 2myvar &lt;- 2 + 6 * 7^2 # not a valid name as it start with number ## Error: &lt;text&gt;:1:2: unexpected symbol ## 1: 2myvar ## ^ Challenge 1.1 Guess the output the result of the following expression then evaluate them to check. 4 +2 ^ 2 (4 + 2) ^ 2 &quot;genotype&quot; &lt; &quot;phenotype&quot; !(&quot;genetics&quot; &lt; &quot;epigenetics&quot;) 25 %% 4 Which of the following are valid variable names? Those that are not, why are they not valid? var var2 2var var-2 var.2 What is the value of z once this code has run? x &lt;- 3 y &lt;- 12 x &lt;- x + 3 z &lt;- y - x z &lt;- z * 2 1.8 Data types Every variable in R has a ‘type’. The type tells R what kind of data it is and consequently what it can and can’t do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words. There are three basic types of data in R: logical - either TRUE or FALSE numeric - numbers character - text surrounded by quotation marks These are called ‘atomic’ data types as they are the most basic types of data from which other data types usually derive. You can find the type of a variable using the class() function. 1 # prints as 1 &quot;1&quot; # prints as &quot;1&quot; class(TRUE) # logical class(1) # numeric class(&quot;hello&quot;) # character class(&quot;TRUE&quot;) # character class(&quot;123&quot;) # character 1 + 1 # works ## [1] 2 &quot;1&quot; + &quot;1&quot; # produces error ## Error in &quot;1&quot; + &quot;1&quot;: non-numeric argument to binary operator !TRUE # works ## [1] FALSE !&quot;TRUE&quot; # produces error ## Error in !&quot;TRUE&quot;: invalid argument type 1.8.1 Factors Factors are a special type for encoding categorical variables. They are composed of the ‘values’ and the ‘levels’, externally they look like characters variables, but internally they are a series of integers denoting the group number and a separate series of characters denoting the identity of the groups. x &lt;- factor(c(&quot;sunny&quot;, &quot;rainy&quot;, &quot;rainy&quot;, &quot;cloudy&quot;, &quot;sunny&quot;)) x ## [1] sunny rainy rainy cloudy sunny ## Levels: cloudy rainy sunny levels(x) ## [1] &quot;cloudy&quot; &quot;rainy&quot; &quot;sunny&quot; as.numeric(x) ## [1] 3 2 2 1 3 Factors are generally a more efficient way of storing categorical variables, it stores only the level value as an integer and a single instance of each unique level. It also makes it possible to quickly re-encode the levels. levels(x) &lt;- c(&quot;Cloudy&quot;, &quot;Rainy&quot;, &quot;Sunny&quot;) x ## [1] Sunny Rainy Rainy Cloudy Sunny ## Levels: Cloudy Rainy Sunny We can set the order of the levels if we would like using the levels argument. x &lt;- factor( c(&quot;low&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;high&quot;, &quot;low&quot;), levels = c(&quot;low&quot;, &quot;high&quot;, &quot;medium&quot;) ) x ## [1] low medium medium high low ## Levels: low high medium Setting these levels can change the behaviour of the variable in models or plots. 1.9 Data structures Data structures are ways to organise many values without having to assign individual names to each value. They help us keep related data together in a single variable and offer powerful ways for us to interact with that data. Three commonly used data structures are summarised below: Figure 1.8: Data structures. Source: http://libguides.wellesley.edu. Another useful data structure is a ‘list’, which we will talk about in Session 3. 1.9.1 Vector A vector is a collection of values of the same type. Values in a vector are laid out linearly, one after another. You can create vectors with the c() function (‘c’ for ‘combine’): my_vect1 &lt;- c(1, 2, 3) # a vector of numbers my_vect2 &lt;- c(&quot;a&quot;, &quot;vector&quot;, &quot;of&quot;, &quot;characters&quot;) # a vector of characters One useful shorthand for creating a sequence of integers is a:b which creates a vector from a to b. 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 3:7 ## [1] 3 4 5 6 7 For very long vectors, it is useful to use the head and tail functions to inspect just a few values. These print the first and last 6 elements of a vector. head(1:10000) ## [1] 1 2 3 4 5 6 tail(1:10000) ## [1] 9995 9996 9997 9998 9999 10000 1.9.2 Matrix A matrix is the two-dimensional extension of the vector, it stores a collection of values of the same type but laid out in a grid with rows and columns. An example of this is a gene count matrices where each genes are represented by the rows, samples are represented by the columns and each cell represents a count for a particular gene in a particular column. The rows and columns can also be labelled with names, but these names are usually considered metadata rather than being a part of the matrix. gene_counts &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2) rownames(gene_counts) &lt;- c(&quot;gene1&quot;, &quot;gene2&quot;) colnames(gene_counts) &lt;- c(&quot;sample1&quot;, &quot;sample2&quot;) class(gene_counts) ## [1] &quot;matrix&quot; &quot;array&quot; gene_counts ## sample1 sample2 ## gene1 1 3 ## gene2 2 4 1.9.3 Data Frame Data frames are similar to matrices in that they store data in rows and columns. The difference is that the data within each column can be of different types. This is the representation used for general tables that record different attributes of individual entries along the rows. A classic example of a data frame is the iris dataset. data(iris) class(iris) iris # prints the whole data frame and floods the screen The head() and tail() functions also work here to print the first and last 6 rows of a data frame for a quick check of the data. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica We can construct a data frame of our own as well using data.frame() my_df &lt;- data.frame( mouse_id = c(&quot;mouse1&quot;, &quot;mouse2&quot;, &quot;mouse3&quot;), age = c(48, 48, 52), weight = c(39.7, 42.2, 46.3) ) class(my_df) ## [1] &quot;data.frame&quot; my_df ## mouse_id age weight ## 1 mouse1 48 39.7 ## 2 mouse2 48 42.2 ## 3 mouse3 52 46.3 The general form for constructing a data frame looks like this data.frame(col_name1 = values1, col_names2 = values2, ...) Where each value is a vector of the same length. You can access a column in a data frame with the shortcut $. Notice that the names of all columns of the data frame appears after typing in my_df$: Figure 1.9: Accessing columns in a dataframe using the ‘$’ symbol. Challenge 1.2 Create a data frame with the columns “name”, “age”, and “height” with 3 rows of whatever value you choose. Guess the values of the following expressions x &lt;- c(2, 3, 4) y &lt;- c(2, 2, 3) z &lt;- x + y # i. x + 3 # ii. z[3] # iii. (x + y) &lt; 5 # iv. sum(z) 1.10 Reading in data Let’s read in some data and start exploring it. You should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function getwd(). If you are following along outside of the WEHI course, you can download the data files from Github - instructions for downloading data from GitHub can be found in the Preface. The file we want to read in is named ‘Ses1_genes.tsv’. All the data files are in a directory called ‘data’ - thus the path to the file (relative to my working directory) is ‘data/Ses1_genes.tsv’. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file ‘Ses1_genes.tsv’ may be different. read.delim(&quot;data/Ses1_genes.tsv&quot;) ## SYMBOL GeneLength Count ## 1 Gm10568 1634 0 ## 2 Gm19860 799 4 ## 3 Gm19938 3259 0 ## 4 Lypla1 2433 768 ## 5 Rp1 9747 0 ## 6 Sox17 3130 1 ## 7 Tcea1 2847 810 ## 8 Mrpl15 4203 431 ## 9 Xkr4 3634 1 ## 10 Rgs20 2241 452 Note that read.delim() also lets you specify character that separates columns of the data. The most common types are comma-separated values (csv) and tab-separated values (tsv). Example of a csv file: Name, Age Andy, 10 Bob, 8 Example of a tsv file: Name Age Andy 10 Bob 8 By default read.delim() uses the tab separator \". We can see what happens if we use the wrong separator in our read.delim call. read.delim(&quot;data/Ses1_genes.tsv&quot;, sep = &quot;,&quot;) ## SYMBOL.GeneLength.Count ## 1 Gm10568\\t1634\\t0 ## 2 Gm19860\\t799\\t4 ## 3 Gm19938\\t3259\\t0 ## 4 Lypla1\\t2433\\t768 ## 5 Rp1\\t9747\\t0 ## 6 Sox17\\t3130\\t1 ## 7 Tcea1\\t2847\\t810 ## 8 Mrpl15\\t4203\\t431 ## 9 Xkr4\\t3634\\t1 ## 10 Rgs20\\t2241\\t452 If you just read in the data, R simply prints the values out in the console. Let’s assign our data frame to a variable called genes: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;) Notice how genes now appears in our ‘Environment’ tab: Figure 1.10: Variable in ‘Environment’ tab. All variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the genes data frame. One quirk that older versions of R has is that columns of character strings are automatically converted to factors. Factors look like characters when printed out, but can cause errors if you actually treat them as characters. It’s generally wise to turn off this automatic conversion. If your R is newer than version 4.0.0 then stringsAsFactors is off by default. genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = TRUE) str(genes) # the SYMBOL column is of type factor ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : Factor w/ 10 levels &quot;Gm10568&quot;,&quot;Gm19860&quot;,..: 1 2 3 4 7 8 9 5 10 6 ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = FALSE) str(genes) # the SYMBOL column is now of type character ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : chr &quot;Gm10568&quot; &quot;Gm19860&quot; &quot;Gm19938&quot; &quot;Lypla1&quot; ... ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 1.11 Vectorised Operations In contrast to some other programming languages where operating on vectors requires a loop structure, operations in R are generally vectorised, meaning they will be automatically applied to each element of the vector. genes$Count # each column of a data frame is a vector ## [1] 0 4 0 768 0 1 810 431 1 452 genes$Count + 10 # adds 10 to each element ## [1] 10 14 10 778 10 11 820 441 11 462 genes$Count == 0 # perform a comparison with each element ## [1] TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE genes$Count &lt; 100 ## [1] TRUE TRUE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE This can be useful for creating new columns based on existing data genes$Expressed &lt;- genes$Count != 0 When assigning in this way, an existing column may be overwritten. If the column assigned to does not exist, a new column is created. Challenge 1.3 Create a new column called Prop_Count that contains each count value as a proportion of the total count value of all 10 genes in the data frame. E.g. if Count was 10 and total count of all 10 genes is 100, that row in Prop_Count should be 0.1. Hint use the sum() function. 1.12 Writing out data The last thing we will do this session is learn to write out data using the function write.table(). There are a few things we must tell write.table(), for it to be able to write out the data the way we want: x - the name of this input is not very informative, but first you must tell the function what you want to write out. In our case we want to write out our dataframe genes. file - the name of the file that we want to write to. sep - how each value in our output file is separated. Common file formats are ‘csv’ and ‘tsv’ (discussed above). In R, a tab is represented by \"\\t\". row.names - this is either TRUE or FALSE, and let’s you specify whether you want to write out row names. If your dataframe does not have row names, put FALSE. col.names - this is also either TRUE or FALSE, and let’s you specify whether you want to write out column names. If your dataframe has column names, put TRUE. We can write out our genes data frame into a .tsv file using the command below: write.table(x = genes, file = &quot;Ses1_Genes_output.tsv&quot;, sep = &quot;\\t&quot;, row.names = FALSE, col.names = TRUE) "],
["session-2.html", "Chapter 2 Session 2 2.1 Missing values 2.2 Subsetting vectors 2.3 Subsetting data structures 2.4 Merge", " Chapter 2 Session 2 In the previous session we learned about: The RStudio environment Mathematical and logical operations Using functions Variables Atomic and collection data types Input and output In this session we will learn about: Missing values Subsetting data structures How to merge two dataframes 2.1 Missing values Missing values are fairly common in data, we will look at how to deal with missing values in R. First, let’s read in some data. Recall we use the function read.delim() and tell R not to read strings as factors using stringsAsFactors = FALSE. We are using the file “Ses2_genes.tsv” today. genes &lt;- read.delim(&quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE) dim(genes) # returns number of rows and columns ## [1] 200 5 head(genes) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 missing chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 You can see in the environment tab that this data frame has 200 rows (observations) and 5 columns (variables). You can also click on the genes entry in the Environment tab (red arrow in Figure 2.1) to display the data in a new window (left): Figure 2.1: Viewing data from the ‘Environment’ tab. Scrolling down the window, you can see that there are several NA entries. NA denotes a missing value in R. NA‘s have some interesting behaviour - they are ’contagious’. For example, if we wanted to take the mean of a vector numbers, which includes a NA, the answer is NA. If we think about it, it makes sense that the mean of two numbers and a ‘missing’ number, that could be anything, is NA. mean(c(2, 3, NA)) ## [1] NA Luckily many mathematical functions have a na.rm option, where you can tell it to remove NA values: mean(c(2, 3, NA), na.rm = TRUE) ## [1] 2.5 Finding out if something is NA is also a bit different, due to the nature of the missing value. So we must use the is.na() function rather than a direct comparison. NA == NA # returns NA rather than TRUE ## [1] NA is.na(NA) ## [1] TRUE is.na(c(2, 3, NA)) ## [1] FALSE FALSE TRUE One last thing to note is that in our data, the symbol of the third row is “missing”, and the 30th row is “Missing”. These are other representations of missing values found in our data that is not detect as such by R. We can change the value to NA in our original data, but generally we don’t want to edit our raw data. Instead we can tell read_delim() what values should be interpreted as NA via the na.strings argument. genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) 2.2 Subsetting vectors Subsetting involves selecting a portion of a data structure and uses square brackets [ ]. There are two main ways to subset a data structure: numerical or logical indices. 2.2.1 Subsetting with numeric indicies Let’s take a look at subsetting vectors first. We can use $ to obtain just one column from the genes data frame. The output will be a vector. genes$Count ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 700 ## [13] 2075 351 22 0 0 893 3 100 32100 269 34 20005 ## [25] 5751 0 275 9 849 7175 768 358 234 5065 2096 1994 ## [37] 757 0 2310 0 1 0 3091 810 30 816 817 1 ## [49] 580 33 0 941 1445 522 2 2346 572 431 5797 2 ## [61] 70 1236 966 235 2 3009 431 452 2602 3481 99 11857 ## [73] 35 1952 0 706 1317 1130 92 0 871 730 3892 3772 ## [85] 20 7 0 756 1 210 101 17 21 537 1240 930 ## [97] 1 1 0 221 1599 0 67 1 0 315 0 0 ## [109] 739 0 0 976 1 715 18636 289 1396 0 101 285 ## [121] 1665 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 0 ## [145] 0 0 0 0 2442 30 1610 0 0 0 16 1 ## [157] 2 0 47 0 1118 0 1 0 2 3 22 0 ## [169] 0 0 0 0 0 0 431 0 0 16 0 1 ## [181] 0 4 0 0 1 0 0 0 0 301 0 0 ## [193] 0 0 0 0 0 0 0 59 We will assign this to a variable called counts. counts is now a variable that refers to a vector containing 200 integers. counts &lt;- genes$Count counts ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 700 ## [13] 2075 351 22 0 0 893 3 100 32100 269 34 20005 ## [25] 5751 0 275 9 849 7175 768 358 234 5065 2096 1994 ## [37] 757 0 2310 0 1 0 3091 810 30 816 817 1 ## [49] 580 33 0 941 1445 522 2 2346 572 431 5797 2 ## [61] 70 1236 966 235 2 3009 431 452 2602 3481 99 11857 ## [73] 35 1952 0 706 1317 1130 92 0 871 730 3892 3772 ## [85] 20 7 0 756 1 210 101 17 21 537 1240 930 ## [97] 1 1 0 221 1599 0 67 1 0 315 0 0 ## [109] 739 0 0 976 1 715 18636 289 1396 0 101 285 ## [121] 1665 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 0 ## [145] 0 0 0 0 2442 30 1610 0 0 0 16 1 ## [157] 2 0 47 0 1118 0 1 0 2 3 22 0 ## [169] 0 0 0 0 0 0 431 0 0 16 0 1 ## [181] 0 4 0 0 1 0 0 0 0 301 0 0 ## [193] 0 0 0 0 0 0 0 59 This will give you the 3rd element of the vector counts: counts[3] ## [1] 932 It is also possible to give a vector of indices, this returns a vector of the same length as the indices given containing the elements corresponding to each index. # return the 3rd to 10th elements counts[3:10] ## [1] 932 0 214 2 2 0 1790 41 The indices do not need to be sequential, nor do they need to be unique or in ascending order. # get the 3rd, 5th and 100th elements counts[c(3, 5, 100)] ## [1] 932 214 221 # get the 3rd element twice, and the 5th element counts[c(3, 3, 5)] ## [1] 932 932 214 # get the 100th, 3rd, and 5th elements counts[c(100, 3, 5)] ## [1] 221 932 214 Note that we have used c() within the square brackets. This is because R expects ONE ‘object’ within the square brackets. Thus, if you want to extract several indices, you must give it ONE vector containing the indices of the elements. A vector (e.g. c(3,5,10)) is considered one ‘object’ but the numbers 3,5,10 are considered three different ‘objects’. Indeed, 3:10, which we used earlier, is actually a vector of the numbers 3 to 10: 3:10 ## [1] 3 4 5 6 7 8 9 10 We can also use the - sign to index all the elements EXCEPT the elements 10 through to 200: counts[-(10:200)] ## [1] 979 15 932 0 214 2 2 0 1790 Note that subsetting past the end of a vector returns NA. short_vec &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) short_vec[5] ## [1] NA short_vec[c(1, 3, 5)] ## [1] &quot;a&quot; &quot;c&quot; NA 2.2.2 Subsetting with logical vectors The alternative way to subset is using a logical vector of the same length as the vector being indexed. Each element of the logical vector denotes whether or not that element of the original vector will be returned in the result. # take the 1st, 2nd and 4th elements from short_vec short_vec[c(TRUE, TRUE, FALSE, TRUE)] ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; You will rarely write out these logicals by hand, instead they usually come from a comparisons, for example if we wanted to take only the non-zero values of counts counts[counts != 0] ## [1] 979 15 932 214 2 2 1790 41 1033 700 2075 351 ## [13] 22 893 3 100 32100 269 34 20005 5751 275 9 849 ## [25] 7175 768 358 234 5065 2096 1994 757 2310 1 3091 810 ## [37] 30 816 817 1 580 33 941 1445 522 2 2346 572 ## [49] 431 5797 2 70 1236 966 235 2 3009 431 452 2602 ## [61] 3481 99 11857 35 1952 706 1317 1130 92 871 730 3892 ## [73] 3772 20 7 756 1 210 101 17 21 537 1240 930 ## [85] 1 1 221 1599 67 1 315 739 976 1 715 18636 ## [97] 289 1396 101 285 1665 47 2 4483 2 363 169 135 ## [109] 2 11 4088 1082 92 3888 17 2442 30 1610 16 1 ## [121] 2 47 1118 1 2 3 22 431 16 1 4 1 ## [133] 301 59 # you can also store the indices in a variable first non_zero &lt;- counts != 0 counts[non_zero] ## [1] 979 15 932 214 2 2 1790 41 1033 700 2075 351 ## [13] 22 893 3 100 32100 269 34 20005 5751 275 9 849 ## [25] 7175 768 358 234 5065 2096 1994 757 2310 1 3091 810 ## [37] 30 816 817 1 580 33 941 1445 522 2 2346 572 ## [49] 431 5797 2 70 1236 966 235 2 3009 431 452 2602 ## [61] 3481 99 11857 35 1952 706 1317 1130 92 871 730 3892 ## [73] 3772 20 7 756 1 210 101 17 21 537 1240 930 ## [85] 1 1 221 1599 67 1 315 739 976 1 715 18636 ## [97] 289 1396 101 285 1665 47 2 4483 2 363 169 135 ## [109] 2 11 4088 1082 92 3888 17 2442 30 1610 16 1 ## [121] 2 47 1118 1 2 3 22 431 16 1 4 1 ## [133] 301 59 Indices are like shopping lists, each element of the index tell us what we need from the original vector. In numerical indices it tells us the position in the vector to take values from, and in logical indices it tells us whether each element should be included in the result. 2.2.3 Useful summaries of logical vectors Two relevant function that are useful to know is the which() and table(). which() takes a logical vector and tells you the indices of the TRUE elements. table() takes any vector and gives you counts of the unique elements, for logical vectors this counts the TRUE and FALSE. which(c(TRUE, FALSE, FALSE, TRUE)) ## [1] 1 4 table(c(TRUE, FALSE, FALSE, TRUE)) ## ## FALSE TRUE ## 2 2 Challenge 2.1 Predict the return values of the following expressions. # i. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) x[c(2, 1, 1, 3)] # ii. c(1, 2, 3, NA) + 1 # iii. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) x[c(TRUE, FALSE, TRUE, TRUE)] Take the following vector and create two subsets of it that are &lt;=5 and &gt;5. How many elements are in each subset? vec &lt;- c(5.16, 7.09, 8.08, 7.6, 3.04, 9.35, 4.68, 8.29, 8.26, 7.38, 5.87, 7.43, 4.52, 6.09, 8.52, 6.03, 4.05, 6.11, 0.9, 2.79, 1.54, 4.57, 3.51, 1.95, 5.72, 6.04, 4.29, 3.47, 1.76, 5.25, 9.91, 2.73, 7.42, 4.85, 6.41, 5.2, 5.8, 3.22, 8.18, 9.96 ) Using numeric indices, create the word c(\"h\", \"e\", \"l\", \"l\", \"o\") from the following vector. i.e. something of the form letter_vec[c(...)]. letter_vec &lt;- c(&quot;e&quot;, &quot;h&quot;, &quot;l&quot;, &quot;o&quot;) 2.2.4 Overwriting subset values You can assign to a subset of a vector to change the values of that subset within a vector. values_vec &lt;- c(1, 2, 3, 4, 5) values_vec[c(3, 5)] &lt;- 10 values_vec ## [1] 1 2 10 4 10 This also works with logical vectors in the similar way. values_vec &lt;- c(1, 2, 3, 4, 5) values_vec[c(FALSE, FALSE, TRUE, FALSE, TRUE)] &lt;- 10 values_vec ## [1] 1 2 10 4 10 2.3 Subsetting data structures Subsetting a 2 dimensional data structure (e.g. a data frame or a matrix) is similar to subsetting a vector, except you now must specify which rows AND which columns you want. The general syntax for the genes data frame looks like this: genes[(rows you want) , (columns you want)] Within the square brackets, you will specify which rows you want, followed by a comma, then what columns you want. 2.3.1 Subsetting data structures with numerics As with vectors, you can use numeric vectors to select the rows and columns you want. # take the 5th to 9th rows and the 2nd and 4th columns. genes[5:9, c(2,4)] ## SYMBOL GeneLength ## 5 Ccnf 3099 ## 6 Cdh6 2632 ## 7 Cdh9 2903 ## 8 Chat 2810 ## 9 Clock 7478 2.3.2 Subsettting data frames using characters Recall that we could select individual columns of the data frames using the $ operator along with the column name. We can also select multiple columns using a vector of column names. Note that column names are enclosed in quotes signifying that they are of the ‘character’ data type. genes[5:9, c(&quot;SYMBOL&quot;, &quot;GeneLength&quot;)] ## SYMBOL GeneLength ## 5 Ccnf 3099 ## 6 Cdh6 2632 ## 7 Cdh9 2903 ## 8 Chat 2810 ## 9 Clock 7478 If you leave the left side of comma empty, R will give you ALL the rows. If you leave the right side of the comma empty, R will give you ALL the columns. This will give you only two columns of the data frame. genes[, c(&quot;SYMBOL&quot;, &quot;Count&quot;)] This will give you the 2nd row and all the columns. genes[2, ] ## EntrezID SYMBOL TXCHROM GeneLength Count ## 2 11634 Aire chr10 1929 15 2.3.3 Removing NA rows using complete.cases() Because of the care required when working with missing values, it is sometimes an option to simply remove all entries that are not complete. This can be done using the complete.cases() function. This function returns a logical vector indicating whether each row of a data frame contains no missing values. # returns logical of same length as number of rows in genes complete.cases(genes) # can be used to filter rows down to only complete rows complete_genes &lt;- genes[complete.cases(genes), ] complete_genes Challenge 2.2 Take the following counts vector and overwrite all values below 10 with the value 0. counts2 &lt;- genes$Count Take the following character vector and using a subset reasisgnment, create the word c(\"g\", \"e\", \"n\", \"e\", \"t\", \"i\", \"c\", \"s\"). char_vec &lt;- c(&quot;*&quot;, &quot;*&quot;, &quot;n&quot;, &quot;*&quot;, &quot;t&quot;, &quot;i&quot;, &quot;*&quot;, &quot;s&quot;) Take the genes data frame and select the symbol, chromosome and count columns of only complete cases that are not missing gene symbols. 2.3.4 Rearranging using the order() function We have seen before that numeric indices can be used to change the order of the output relative to the original input. A common application of this is to arrange a table by the values in some column using the order() function. The order function returns a vector of numerics of the same length with values such that the the vector would be sorted. # order returns a vector of numerics that can be use to index order(genes$TXCHROM) # using this to index will result in a sorted vector genes$TXCHROM[order(genes$TXCHROM)] # it can also be applied to data frames to sort by a column genes[order(genes$TXCHROM), ] # multiple arguments can be given to order to sort by multiple columns genes[order(genes$TXCHROM, genes$SYMBOL), ] 2.3.5 Subsetting data structures with logicals One very useful operation is to subset a whole table based on the values of a particular column. As an example, we subset our genes table to only the genes with a count of at least 100. counts[counts &gt; 100] genes[genes$Count == 0, ] # subset all the genes with 0 counts and every column genes[genes$Count == 0, ] # subset all the genes with &gt;0 counts and every column genes[genes$Count &gt; 0, ] This allows tables to be filtered based on a specific column. 2.3.6 %in%, &amp; and | The %in% operator tests whether elements of the first vector is contained within the second vector. It will return TRUE where the elements of the first vector is found in the second. # %in% operator tests membership c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) %in% c(&quot;b&quot;, &quot;d&quot;) # result of in can be used as a filtering for multiple matches genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;) genes[genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;), ] The &amp; (AND) operator takes two logical vectors and performs an AND operation on them, this means that along the positions of the two vectors, TRUE is returned only if it is TRUE in those positions of both vectors. Rather than thinking about the logcail AND operation, it’s easier to just read the expression literally. For example if we wanted to select genes from chromosome 1 and with counts greater than 500, we use the following row index. genes[genes$TXCHROM == &quot;chr1&quot; &amp; genes$Count &gt; 500, ] The | (OR) is a complementary operation that takes two logical and performs an OR operation, this returns TRUE if one or both values are TRUE. Once again we can simply read the expression literally. If we wanted genes that are from chromosome 1 or have counts greater than 500 we can use the following row index. genes[genes$TXCHROM == &quot;chr1&quot; &amp; genes$Count &gt; 500, ] 2.4 Merge Two dataframes can be combined with the merge() function. For example, let’s say we have two dataframes (dataframe1 and dataframe2), each containing different information about 3 genes: Figure 2.2: The two dataframes to merge. We can merge these dataframes together into one data frame that contains all the information about genes. Notice that the order of the genes is not the same in the two dataframes. During the merge we want R to match each row according to the Gene column in each data frame such that the correct information is added to the correct row. The result would have 4 columns, 3 rows and the correct information along each row. Figure 2.3: The two dataframes merged. Let’s practice merging on the files “Ses2_genes.tsv” and “Ses2_geneNames.tsv”. “Ses2_genes.tsv” contains gene EntrezIDs, gene symbol, gene chromosome, gene length and their count value. “Ses2_geneNames.tsv” contains gene names and their corresponding EntrezIDs. First we will read in both files: genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) gene_names &lt;- read.delim( &quot;data/Ses2_geneNames.tsv&quot;, stringsAsFactors = FALSE ) What we want to do now, is to merge the two data frames into one data frame with 6 columns, containing the information from both data frames. We also want to make sure that when R merges the data frames, the correct information is added to the correct row. You will notice that both the genes and gene_names data frames have a column giving the EntrezIDs. This column can be used as the “index” or “ID” column to make sure the correct information is added to each row. We can do this by telling merge() to match rows in the two data frames using EntrezIDs during the merge. merge() has the following syntax: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first data frame by.y = # name of the column to match in the second data frame ) Thus, to merge our two dataframes, using the EntrezID column of each data frame to match rows, we can use: genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;) head(genes2) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 &lt;NA&gt; chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## GENENAME ## 1 activin receptor IIA ## 2 autoimmune regulator (autoimmune polyendocrinopathy candidiasis ectodermal dystrophy) ## 3 bone morphogenetic protein 2 ## 4 calcium channel, voltage-dependent, R type, alpha 1E subunit ## 5 cyclin F ## 6 cadherin 6 You may have noticed that there are 200 rows in the genes data frame but 290 rows in the gene_names data frame. This means that there are more genes in the gene_names data frame than there are in the genes data frame. This means that there are a few ways to merge the two data frames. We can either keep all rows from both data frames, keep only rows where there is a corresponding “index” value in both dataframes or keep only rows from one of the two data frames. We can specify which rows to keep using the following additional arguments in merge(): merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe all.x = # logical. If TRUE, keep all rows from the first dataframe, # even if does not have a matching row in the second dataframe all.y = # logical. If TRUE, keep all rows from the second dataframe, # even if does not have a matching row in the second dataframe ) By default, merge() will only keep rows that have corresponding “index” values in both data frames. Challenge 2.3 Take the genes data frame and filter down to only genes from the first 3 chromosomes. Take the result of question 1 and sort it by chromosome then count. i.e. genes in the result should be grouped by chromosome, then count. Merge the data frames genes and gene_names and keep all rows from both data frames. "],
["session-3.html", "Chapter 3 Session 3 3.1 Basic plotting 3.2 Lists 3.3 Classes 3.4 Packages 3.5 DGEList", " Chapter 3 Session 3 In the last session we learned about: Missing values Subsetting data structures How to merge two dataframes In this session we will learn: Basic plotting The list data structure Classes The DGEList object from the package limma 3.1 Basic plotting R is great for creating publication quality plots. There is an enormous number of plotting functions available through external packages, but we’ll only briefly cover the basic plots included with R. We will use our genes data from the previous session to demonstrate the plots. genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) 3.1.1 Scatter plots Scatter plots can be created using the plot() function. This plot is used to compare two variables against each other. There are two ways to use plot(), by specifying the x and y variables or by putting in a special notation using ~. For the version using x and y values the input the equal length vectors for x and y axis values as two arguments. # y~x style plot(genes$GeneLength, genes$Count) For the version using ~ you put in y ~ x as column names from a data frame and the data frame to be used as arguments. # ~ style plot(Count ~ GeneLength, data = genes) The basic scatter plot has many options that can be found in the help page. For example we can change the title of the plot, the axes and the take the log of one axis. plot( Count ~ GeneLength, data = genes, main = &quot;Count vs Gene Length&quot;, xlab = &quot;Gene Length&quot;, ylab = &quot;Count&quot; ) 3.1.2 Histograms Histograms are used to show the distribution of single variables. In R they are created using the hist() function. hist(genes$GeneLength) 3.1.3 Boxplots Box plots are used to visualise the distribution of values by their medians, quartiles and inter-quartile ranges. It can be useful for comparing the distribution of multiple groups. The simplest way to create a box plot is to use the format x ~ group, where x is the variable on the y-axis and group is the grouping variable along the x-axis. For example we can create box plots of the gene lengths across chromosomes. boxplot(GeneLength ~ TXCHROM, data = genes) Challenge 3.1 Plot the gene length against the log of the counts. Using arguments in the “Details” section of the plot() function’s help page, change the plotting symbol from circles to solid dots. Find the argument in the help page of hist() that allows you to create a histogram that is broken into 40 cells/bins. Create the histogram with 40 cells. Set the title of the plot to “Histogram of gene lengths” and the x-axis label to “Gene length”. Find and use the argument of boxplot() that allows the box plot to be drawn horizontally. 3.2 Lists We previously saw the data structures vectors, matrices and data frames. These help us track collections of related data values using a single variable. Another fundamental data structure is a list, it is like a vector in that it is 1-dimensional. However, the list can contain any combination of data types within itself, even another list. list(1, &quot;a&quot;, 1.5) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] 1.5 Not only can you put different data types into a list, you can also put a data data structure into one element of a list. In the list below, the first element is a vector that contains 3 numbers, the second element is a character and the third element is a data frame that has two columns. list( c(1, 2, 3), c(&quot;words&quot;, &quot;letters&quot;), data.frame( column1 = c(1, 2, 3), column2 = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) ) ) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;words&quot; &quot;letters&quot; ## ## [[3]] ## column1 column2 ## 1 1 a ## 2 2 b ## 3 3 c The output can often help you understand how the list is structured. The double brackets (e.g. [[1]]) signifies an element of the list and which index it is at. Underneath the [[1]] and [[2]], there is a [1] - this indicates that the first and second elements both contain a vector. Underneath [[3]] you see the standard output for a data frame, which we have seen before. You can have a list as an element of a list, so this can extend into a hierarchical structure resembling folders in a computer. list(1, list(1,&quot;a&quot;)) ## [[1]] ## [1] 1 ## ## [[2]] ## [[2]][[1]] ## [1] 1 ## ## [[2]][[2]] ## [1] &quot;a&quot; The first element, indicated by [[1]], is a vector, indicated by the [1] underneath. The second element, indicated by the first [[2]] contains a list: [[2]][[1]] - tells you that the second element is a list, of which the first element of the inner list is the number 1. [[2]][[2]] - tells you that the second element is a list, of which the second element of the inner list is “a”. Many Bioconductor packages, including limma, use lists so it is an important data structure to understand. 3.2.1 Indexing lists We can access elements of a list using square brackets. You may have noticed that there are often double square brackets [[]]. There is a subtle but important difference between single square brackets and double square brackets when subsetting lists. Single brackets [] will return a list. Double brackets [[]] will return elements of the list. To demonstrate, let’s make a list: my_list &lt;- list( c(&quot;a&quot;, &quot;b&quot;), c(1, 2, 3), c(4, 5, 6) ) Take a look at the output of obtaining the first element with single square brackets and double square brackets: my_list[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; class(my_list[1]) ## [1] &quot;list&quot; my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; class(my_list[[1]]) ## [1] &quot;character&quot; The difference is minor; with my_list[1] there is an extra [[1]] at the top, with my_list[[1]] there is no [[1]] at the top. Using single brackets is taking a subset of the list, but still as a list structure, while using double brackets unwraps the value from within the list. The str() function gives us some more information: str(my_list[1]) ## List of 1 ## $ : chr [1:2] &quot;a&quot; &quot;b&quot; str(my_list[[1]]) ## chr [1:2] &quot;a&quot; &quot;b&quot; This tells us that when you use single brackets, the output is a list containing one element, which is a vector. When you use double brackets, the output is just a vector, not contained within a list. 3.2.2 Chaining list indices Because of the hierarchical or folder-like nature of lists, you may have to index multiple times to get to the value you want. To do this we can chain indexes together, they are applied from left to right. my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list[[1]][1] ## [1] &quot;a&quot; 3.2.3 Named list Traversing a list using numeric indices can get very confusing very quickly. It is easy to make mistakes and code containing only numeric indices becomes extremely difficult to decipher. So often it is wise to create named lists, where each element has name that will help with context on the values stored. named_list &lt;- list( name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32, 40) ) named_list ## $name ## [1] &quot;Andy&quot; &quot;Sally&quot; ## ## $age ## [1] 32 40 If your list is named, you can use $ or a character value to access elements. The following two approaches are identical. named_list$name ## [1] &quot;Andy&quot; &quot;Sally&quot; named_list[[&quot;name&quot;]] ## [1] &quot;Andy&quot; &quot;Sally&quot; You can use the names() function on a list to find all the names at the first layer. names(named_list) ## [1] &quot;name&quot; &quot;age&quot; Assigning values to elements of a list that don’t exist adds that element onto the list. my_list &lt;- list( item = &quot;banana&quot;, weight = 120 ) my_list ## $item ## [1] &quot;banana&quot; ## ## $weight ## [1] 120 my_list$price &lt;- 10 my_list ## $item ## [1] &quot;banana&quot; ## ## $weight ## [1] 120 ## ## $price ## [1] 10 Much like how indices can be chained together, named access of elements can also be chained together. person &lt;- list( name = &quot;Alice&quot;, address = list( home = &quot;123 Home Street&quot;, work = &quot;321 Work Street&quot; ) ) person$addres$home ## [1] &quot;123 Home Street&quot; Challenge 3.2 Using our genes data frame, create a list genes_list containing 3 elements: “chr1”, “chr2” and “chr3” where each element contains the subset data frame of genes belonging to that chromosome. Use str() to inspect the following list and access the value “success!” using both double bracket numeric indices and named $ indices. maze_list &lt;- list(a = &quot;nope&quot;, b = list(x = &quot;nope&quot;, y = list(i = &quot;nope&quot;, ii = &quot;nope&quot;), z = list(i = &quot;nope&quot;, ii = &quot;nope&quot;, iii = &quot;success!&quot;)), c = &quot;nope&quot;) Create a list “my_gene” that has the following structure. &gt; str(my_gene) List of 4 $ entrezID : num 59272 $ ensemblID: chr &quot;ENSG00000130234&quot; $ position :List of 4 ..$ chromosome: chr &quot;chrX&quot; ..$ strand : chr &quot;-&quot; ..$ start : num 15561033 ..$ end : num 15602158 $ enhancers: chr [1:2] &quot;GH0XJ015596&quot; &quot;GH0XJ015579&quot; 3.3 Classes Everything in R is an ‘object’, each object falls under a ‘class’. A class defines the properties an object and determines what can be done with it. These are analogous to file formats of regular files on the computer. We have seen the basic classes of objects such as character, numerics and logicals. Bioconductor packages often define their own classes in order to represent more complex data. For example, the limma package uses the DGEList class. This is a class that is designed for storing read count data from RNA sequencing. It is a special ‘list’ that must contain two components: counts - which must be a numeric matrix, that stores counts. Each row must be a gene and each column must be a sample. samples - which must be a data frame, that contains information about each sample. Each row must be a sample and must contain information about the group (e.g. treatment group) the sample belongs to, the library size of that sample and the normalisation factor for that sample. There are also a number of optional components of the DGEList class, such as a data frame containing gene annotation information. The main purpose of having a special class rather than just a regular list is to guarantee specific properties on the data. For example the samples data frame must have the same number of rows as the counts matrix has columns. These constraints allow methods developers to create functions with confidence in what data is present within the objects. 3.4 Packages In addition to the functional included in a vanilla R installation, an enormous amount of functionality exists in external packages that can be installed using install.packages() function or via the ‘Packages’ tab. Note that install.packages() will only find packages in the default CRAN repository. Most Bioinformatics softwares are in a separate repository called Bioconductor, packages from Bioconductor can be installed through the ‘BiocManager’ package. To do this you first need to install ‘BiocManager’ from CRAN, then we can use it to install the Bioconductor packages ‘limma’ and ‘edgeR’. install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;limma&quot;, &quot;edgeR&quot;)) Once a package is installed, you can load it in the make all the functions within available. This is done using the ‘library’ function. Note that quotation marks are not required around the package name, this is a rare behaviour granted to the library function to save some typing because it’s so commonly used. library(edgeR) ## Loading required package: limma library(limma) 3.5 DGEList The RNA sequencing analysis we will go through is a simplified version of that performed in the article from Law et al. (Law et al. 2016). The RNA sequencing data we will use is from Sheridan et al. (Sheridan et al. 2015). It consists of 9 samples from 3 cell populations; basal, luminal progenitor (LP) and mature luminal (ML), which has been sorted from the mammary glands of female virgin mice. The reads have been aligned to the mouse reference genome (mm10) and reads summarised at the gene-level (using mm10 RefSeq-based annotation) to obtain gene counts. Gene level summarisation involves counting the number of reads mapped to each gene, for each sample. The resulting ‘count of reads’ is often referred to simply as ‘counts’. Each data file corresponds to one sample and thus there is one data file for each sample. Each data file details the number of reads mapped to every gene for the sample corresponding to that data file. Within each data file, there are 3 columns - ‘EntrezID’, ‘GeneLength’ and ‘Count.’ ‘EntrezID’ and ‘GeneLength’ gives the EntrezID and gene length of one gene and ‘Count’ gives the number of reads mapped to that gene. The first four lines of one file (and thus one sample) is shown below: EntrezID GeneLength Count 497097 3634 2 100503874 3259 0 100038431 1634 0 19888 9747 1 We will be looking at 9 samples (and using 9 data files) in total. Their details are shown below: Table 3.1: Summary of samples. File name Sample name Phenotype group GSM1545535_10_6_5_11.txt 10_6_5_11 LP GSM1545536_9_6_5_11.txt 9_6_5_11 ML GSM1545538_purep53.txt purep53 Basal GSM1545539_JMS8-2.txt JMS8-2 Basal GSM1545540_JMS8-3.txt JMS8-3 ML GSM1545541_JMS8-4.txt JMS8-4 LP GSM1545542_JMS8-5.txt JMS8-5 Basal GSM1545544_JMS9-P7c.txt JMS9-P7c ML GSM1545545_JMS9-P8c.txt JMS9-P8c LP To create a DGEList object, we will use the readDGE() function. There are three important arguments to this function: files - a vector of data file names path - the path to the directory that contains your data files. If the data files are in your working directory, don’t worry about this argument. If the data files are somewhere else, like a folder called ‘data’, in your working directory you must give the path to that folder colums - the columns of the input files which have the gene names and counts respectively (as the column indices) First, we will create a vector of the file names. You can simply copy and paste this code into your R script. files &lt;- c( &quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot; ) groups &lt;- c(&quot;LP&quot;, &quot;ML&quot;, &quot;Basal&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;) Next, we will create our DGEList object. I have put my data files in a folder called “data” (within my working directory). Thus, I must specify path = \"data\". Depending on where you have put your data files, you may need a different input to path or not have to include the path argument (if your data files are NOT within a folder in your working directory). dge &lt;- readDGE(files, path = &quot;data/counts&quot;, columns = c(1,3), group = groups) class(dge) ## [1] &quot;DGEList&quot; ## attr(,&quot;package&quot;) ## [1] &quot;edgeR&quot; The readDGE() function uses the read counts from our 9 data files (and thus 9 samples) to create a DGEList object containing count information for all 9 samples and every gene included in our data files. It has 2 elements, one named samples and one named counts. For small enough matrices, if you are using RStudio, you can take a look at each using View(): View(dge$counts) Note that the column names are the file names. The DGEList object was created using the information in the “.txt” files. The function readDGE() has used the file name as the name of each sample because we have not told readDGE() what the sample names are. It has therefore simply used the file names. This makes logical sense as each file contained the count data for one sample. The samples data frame can also be viewed: View(dge$samples) The output should look something like this: Figure 3.1: View of the samples data frame from the DGEList object we created and called x. This is a data frame where each row is 1 sample, and details of each sample is given in the 4 columns. files gives the file names. group details the phenotype group the sample belongs to. As we have not specified this yet, the default 1 is given for each sample. lib.size gives the library size. This is the total sum of all counts for that sample. norm.factors this gives the normalisation factor for each sample. As we have not calculated any normalisation factors, this is 1 for each sample. This data frame also has row names, which are currently the file names of each sample. Again, because we have not told readDGE() what the sample names are, it has used the file names. Let’s change the row names to be the sample names, instead of the full file name (see Table 3.1). We can do this by first creating a vector of sample names. You can simply copy and paste the code below into your R script. samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) We can change the row names in the samples data frame using the rownames() function. This function will give you the row names of a data structure (a data frame in this instance): rownames(dge$samples) ## [1] &quot;GSM1545535_10_6_5_11&quot; &quot;GSM1545536_9_6_5_11&quot; &quot;GSM1545538_purep53&quot; ## [4] &quot;GSM1545539_JMS8-2&quot; &quot;GSM1545540_JMS8-3&quot; &quot;GSM1545541_JMS8-4&quot; ## [7] &quot;GSM1545542_JMS8-5&quot; &quot;GSM1545544_JMS9-P7c&quot; &quot;GSM1545545_JMS9-P8c&quot; We can see that the row names are the file names as we saw above. To replace these file names with the sample names we can run: rownames(dge$samples) &lt;- samplenames Challenge 3.3 Create a box plot of the library sizes of the samples. Find the following information: How many genes are there in dge? How many samples are there in dge? Which sample has the smallest library size? Which sample has the largest library size? References "],
["session-4.html", "Chapter 4 Session 4 4.1 DGEList 4.2 Filtering 4.3 Normalisation 4.4 MDS plots 4.5 Linear modelling 4.6 Statistical testing 4.7 MA Plot", " Chapter 4 Session 4 In this session we will run through the basic steps for analysing a simple RNA-seq experiment using the limma-voom workflow. This includes: filtering out lowly expressed genes normalisation creating a multidimensional scaling (MDS) plot creating a design matrix fitting gene-wise linear models (with empirical Bayes moderation to more accurately estimate gene-wise variability) performing statistical testing for differential expression The aim of this session is to give you experience with a real-world RNA-seq analysis, and making extensive use of an external library. We will not cover the statistics in any depth. In general analysis packages will want your data in some specific format, so it’s important to be able to manipulate the data to fit the package’s requirements. Much of the materials here are explained in greater detail in the limma user’s guide. You can view this by typing help(\"limma\") and following the links. 4.1 DGEList The data we are looking at comes from three cell populations (basal, luminal progenitor (LP) and mature luminal (ML)) sorted from the mammary glands of female virgin mice, each profiled in triplicate. Let’s start by creating our DGEList object. As a reminder, this object contains 3 key pieces of data: counts: the main data of this object, a matrix of count values with samples along the columns and features/genes along the rows. samples: a data frame containing annotation for the samples. The rows in this table describe the corresponding column of the counts data. genes: a data frame containing annotation for the genes in the counts matrix. The rows in this table describe the corresponding row in the counts matrix. # load required packages library(edgeR) library(limma) # vector of file names files &lt;- dir(path = &quot;data/counts&quot;, pattern = &quot;GSM&quot;) group &lt;- factor(c(&quot;LP&quot;, &quot;ML&quot;, &quot;Basal&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;, &quot;Basal&quot;, &quot;ML&quot;, &quot;LP&quot;)) samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) # create DGEList object dge &lt;- readDGE(files, path = &quot;data/counts&quot;, columns = c(1, 3), group = group, labels = samplenames) # add gene annotation information dge$genes &lt;- read.delim(&quot;data/Ses3_geneAnnot.tsv&quot;, stringsAsFactors = FALSE) You can index the DGEList object by treating it as if it were the counts matrix, the object will handle the extraction and ordering of the sample and gene annotation data frames. 4.2 Filtering The first step is to filter out lowly expressed genes. There are two main problems with low abundant genes: Technical variation is more problematic for low abundance genes. This variation is thought to be due to two factors; insufficient mixing and low sampling fraction (McIntyre et al. 2011). Insufficient mixing of solutions during library preparation can result in uneven distribution of reads. RNA sequencing can be thought of as sampling. Measurement errors will occur simply due to the random nature of the sampling process. This problem affects lowly abundant RNA species more because the relative error for small count values is larger than it would be for more highly abundant RNA species. Biologically, genes that are expressed at low, biologically not meaningful, levels are not of interest. Removing these highly variable, lowly expressed genes increases your ‘power’ to detect differentially expressed genes (Bourgon, Gentleman, and Huber 2010), where ‘power’ is your ability to detect true positives. In testing for differential expression, a statistical test is conducted for each gene. When a high number of statistical tests are performed, a portion of them will be significant purely due to random chance. A common procedure to control for the number of false positive is to perform ‘multiple testing correction’ on the p-values. This adjusts the p-value in a way that reduces the number of false positives but comes at the cost of reduced power to detect true positives. If we filter out uninteresting, lowly expressed genes, we need to perform fewer statistical tests and reduce the impact that multiple testing adjustment has on detection power. The filterByExpr() function provides an automatic way to filter genes. Roughly speaking, by default, it keeps genes with a count of 10 or more, in at least as many samples as the smallest experimental group. In our experiment, there are 3 phenotype groups each with 3 samples. Therefore we retain only genes that have 10 or more counts in 3 or more samples. More specifically, the actual filtering is done on counts per million, with similar result to the above criteria. This is to prevent bias against samples with small library sizes. The output of this function is a vector of logicals, indicating which genes (rows) should be kept and which filtered. keep &lt;- filterByExpr(dge) table(keep) ## keep ## FALSE TRUE ## 10555 16624 dge &lt;- dge[keep, , keep.lib.sizes = FALSE] dim(dge$counts) ## [1] 16624 9 We can see that we now have 16624 genes. We started with 27179 genes - meaning that ~40% of genes have been filtered out. 4.3 Normalisation The aim of normalisation is to remove systematic technical effects. There are two main factors that need to be normalised for in RNA-seq: Sequencing depth/library size - technically, sequencing a sample to half the depth will give, on average, half the number of reads mapping to each gene (Robinson and Oshlack 2010). RNA composition - if a large number of genes are unique to, or highly expressed in, only one experimental condition, the sequencing capacity available for the remaining genes in that sample is decreased. For example, if there are only five genes being studied in two experimental groups, if one gene is particularly high in group A, then with limited sequencing depth, that gene will reduce the counts of the remaining four genes. The effect of this is that the remaining four genes appear under-expressed in group A compared to group B when the true amount of gene product is actually equal for these 4 genes (Robinson and Oshlack 2010). Sequencing depth is accounted for by calculating the counts per million (cpm). This metric is calculated by: taking the library size (sum of all counts for a sample), dividing this by 1,000,000 to get the ‘per million’ scaling factor, then dividing all read counts for each gene in that sample by the ‘per million’ scaling factor RNA composition can be accounted for by using more sophisticated normalisation methodologies. We will use ‘trimmed mean of M-values’ (TMM), which estimates relative RNA levels from RNA-seq data (Robinson and Oshlack 2010). Under the assumption that most genes are not differentially expressed, TMM calculates a library size scaling factor for each library (sample). This is done using the following steps: calculate the gene expression log fold changes and absolute expression values for pair-wise samples (selecting one sample from the experiment as a reference) remove the genes with the highest and lowest fold changes and absolute expression values take a weighted mean of the remaining genes (where the weight is the inverse of the approximate asymptotic variances). This gives the normalisation factor for each library (sample) Subsequent steps in this analysis will use log-cpm values, calculated using the normalisation factors, which scales each library size. We can calculate the normalisation factors, specifying that we want to use the \"TMM\" method: dge &lt;- calcNormFactors(dge, method = &quot;TMM&quot;) This function calculates the normalisation factors for each library (sample) and puts this information in the samples data frame. Note that it takes dge (our DGEList object as input) and returns a DGEList object as well. Let’s take a look at our normalisation factors: dge$samples ## files group lib.size norm.factors ## 10_6_5_11 GSM1545535_10_6_5_11.txt LP 32857304 0.8943956 ## 9_6_5_11 GSM1545536_9_6_5_11.txt ML 35328624 1.0250186 ## purep53 GSM1545538_purep53.txt Basal 57147943 1.0459005 ## JMS8-2 GSM1545539_JMS8-2.txt Basal 51356800 1.0458455 ## JMS8-3 GSM1545540_JMS8-3.txt ML 75782871 1.0162707 ## JMS8-4 GSM1545541_JMS8-4.txt LP 60506774 0.9217132 ## JMS8-5 GSM1545542_JMS8-5.txt Basal 55073018 0.9961959 ## JMS9-P7c GSM1545544_JMS9-P7c.txt ML 21305254 1.0861026 ## JMS9-P8c GSM1545545_JMS9-P8c.txt LP 19955335 0.9839203 These normalisation factors are all close to 1 for all samples, suggesting minimal difference in relative RNA levels between samples. boxplot(log(dge$counts + 0.5)) boxplot(cpm(dge$counts, log = TRUE)) Challenge 4.1 Create a boxplot of the normalisation factors versus group. rowSums() can be used on a matrix to take sums across the rows. Use this to retrieve annotations of all genes with more than 1,000,000 total counts across all samples. What are the 5 most highly expressed genes within the ML samples? 4.4 MDS plots Before we perform statistical tests, it’s useful to perform some exploratory visual analysis to get an overall idea of how our data is behaving. MDS is a way to visualise distances between sets of data points (samples in our case). It is a dimensionality reduction technique, similar to principal components analysis (PCA). We treat gene expression in samples as if they were coordinates in a high-dimensional coordinate system, then we can find “distances” between samples as we do between points in space. Then the goal of the algorithm is to find a representation in lower dimensional space such that points that the distance of two objects from each other in high dimensional space is preserved in lower dimensions. The plotMDS() from limma creates an MDS plot from a DGEList object. plotMDS(dge) Each point on the plot represents one sample and is ‘labelled’ using the sample name. The distances between each sample in the resulting plot can be interpreted as the typical log2-fold-change between the samples, for the most differentially expressed genes. We can change the labelling to use the name of the group the sample belongs to instead: plotMDS(dge, labels = group) This shows us that the phenotype groups tend to cluster together, meaning that the gene expression profiles are similar for samples within a phenotype group. The ‘Basal’ type samples quite close together while the ‘LP’ (luminal progenitor) and ‘ML’ (mature luminal) type samples are further apart, signifying that their expression profiles are more variable. To make the three phenotype groups more distinct in our graph, we are going to colour samples from each group differently. To do this, we will use the col argument in plotMDS(). col takes in a vector the same length as the number of points in the plot (9 in our case, as there are 9 samples). Each element of the vector should be a colour name (R understands over 600 colour names), indicating what colour that sample should be. To make this more clear, take a look at the table below, which lists all the samples and the phenotype group they belong to: Samples Group 10_6_5_11 LP 9_6_5_11 ML purep53 Basal JMS8-2 Basal JMS8-3 ML JMS8-4 LP JMS8-5 Basal JMS9-P7c ML JMS9-P8c LP For example, let’s say we wanted LP samples to be coloured green, ML samples to be coloured red and Basal samples to be coloured blue. The col argument would then require a vector that we can generate as follows group_col &lt;- dge$samples$group levels(group_col) &lt;- c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;) group_col &lt;- as.character(group_col) group_col ## [1] &quot;green&quot; &quot;red&quot; &quot;blue&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; &quot;blue&quot; &quot;red&quot; &quot;green&quot; We can also add a legend to the figure by running the legend() function immediately after a new figure is created. We have to specify where to position the legend as well as the labels and colours within the legend. plotMDS(dge, labels = group, col = group_col) legend(&quot;topright&quot;, legend = c(&quot;Basal&quot;, &quot;LP&quot;, &quot;ML&quot;), fill = c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;)) 4.5 Linear modelling The next step of the limma-voom analysis is to fit a linear model for each gene. A linear model is a broad class of statistical models that predict a variable of interest using one or more ‘explanatory’ (also called ‘predictor’) variables. The most basic type is linear regression, which models the relationship between a continuous variable and continuous or categorical ‘explanatory’ variables. It uses an equation that looks like this: \\(Y = \\beta_{0} + \\beta_{1}X_{1} + \\beta_{2}X_{2}...\\) This equation is saying that a response variable of interest \\(Y\\) is equal to a constant (\\(\\beta_{0}\\)) plus the sum of the covariates (\\(X_{i}\\)) each multiplied by a constant coefficient (\\(\\beta_{i}\\)). Our experiment is quite simple, since there is only a single covariate, the cell type. The true benefit of using linear models is in its ability to accommodate more complex designs including multiple covariates. To fit the linear models in the limma-voom framework we need two objects in addition to our data: A design matrix, representing the covariates. A contrast matrix, representing the specific comparison we wish to make. 4.5.1 Design matrix The design matrix specifies the values of the covariates for each sample. This is represented as a matrix due to the mathematical convenience. To generate a design matrix. We use the function model.matrix(), with the expression ~0 + group. This returns a matrix representing the design where there is no intercept term and group is the only covariate. If we omit the 0 then there would be an intercept in the model, and if we included more covariates then more columns would be generated. design &lt;- model.matrix(~0 + group, data = dge$samples) design ## groupBasal groupLP groupML ## 10_6_5_11 0 1 0 ## 9_6_5_11 0 0 1 ## purep53 1 0 0 ## JMS8-2 1 0 0 ## JMS8-3 0 0 1 ## JMS8-4 0 1 0 ## JMS8-5 1 0 0 ## JMS9-P7c 0 0 1 ## JMS9-P8c 0 1 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; There are 9 rows, one for each sample. Along the columns are the names of the groups. The values in the cells denote membership of the particular sample for a particular group, as our groups in this case are mutually exclusive, each row contains only a single 1 to denote membership in a single group. 4.5.2 Contrasts ‘Contrasts’ let us ask specific questions between our experimental groups. In our data we have 3 experimental groups, if we are to test for differential expression, we are most likely interested in differences between only two of the groups at a time. Contrasts let us specify exactly what we’re testing for, and is also represented by a matrix just like the design. A contrast matrix can be made using the makeContrasts() function. Within this function, we specify the name of each specific contrast and the formula for that contrast. For example, the BasalvsLP contrasts compares the difference between the Basal and LP groups. Note that the name of the phenotype groups must be written exactly as they are in the column names of our design matrix (see above). In addition to the individual contrasts, the function must know about the design of the model. This is passed through the levels argument, which either accepts a matrix with the column names corresponding to levels of your experimental groups, or the levels themselves as a character vector contr.matrix &lt;- makeContrasts(BasalvsLP = &quot;Basal - LP&quot;, BasalvsML = &quot;Basal - ML&quot;, LPvsML = &quot;LP - ML&quot;, levels = design) # alternatively &#39;levels = colnames(design)&#39; contr.matrix ## Contrasts ## Levels BasalvsLP BasalvsML LPvsML ## Basal 1 1 0 ## LP -1 0 1 ## ML 0 -1 -1 Note that the sum of all the numbers along each column is 0. The first column is the contrast for the difference between Basal (1) and LP (-1). This property is required for valid contrast matrices. An alternative test may be between one group and the average of the others which would look like c(1, -0.5, -0.5) down one of the columns. 4.5.3 Variance modelling with voom We are now ready to fit our linear models. Limma fits linear models to the data with the assumption that the underlying data is normally distributed. Count data is generally not normally distributed, but log transforming count data gives it a roughly normal distribution sufficient for linear models to work well. To do this, limma transforms the raw count data to log-cpm using library sizes and the normalisation factors we calculated previously. In addition to the normalisation steps, the limma-voom pipeline uses the voom() function to generate weights for the individual genes based on a modelled mean-variance relationship. This modelling allows use to get more information out of small sample sizes as the weights prevent our model from being more heavily influenced by more variable data points. The voom() function takes as arguments, our DGEList object and our design matrix. It also optionally outputs a plot of the mean-variance relationship of our data, called the ‘voom-plot’. v &lt;- voom(dge, design, plot = TRUE) The output of voom() (our variable v) is an EList object which contains the following elements: genes - a data frame of gene annotation data. targets - data frame of sample data. E - numeric matrix of normalised log-cpm values. weights - numeric matrix of precision weights. design - the design matrix. Challenge 4.2 Create the MDS plot with legend, but with solid dots instead of text within the plot. Which of the elements of the EList is newly generated, which are taken from previous objects? 4.5.4 Fitting the linear model We are now ready to fit our linear model with lmFit(), which calculates coefficients we defined in our design matrix design. The resulting object, vfit is a MArrayLM object. It contains a information about our genes (the same data frame as genes from our EList object v above), the design matrix and a number of statistical outputs. Of most interest to us is the coefficients, stored in an element called coefficients. The first rows of this matrix is shown below. Each gene is row and is labelled using the EntrezID. Each column gives coefficients for each of our phenotype groups. These coefficients are weighted averages of the log-cpm of each gene in each group. vfit &lt;- lmFit(v, design) head(vfit$coefficients) ## Basal LP ML ## 497097 3.0241632 -4.490392 -3.944477 ## 20671 0.2681245 -2.488746 -2.024896 ## 27395 4.3271126 3.901078 4.365378 ## 18777 5.2069566 4.976083 5.654066 ## 21399 5.2108711 4.901842 4.876380 ## 58175 -1.9296994 3.581328 3.133985 We can then use contrasts.fit() to calculate coefficients for each contrast (or ‘comparison’) we specified in our contr.matrix. The output is also an object of the class MArrayLM (also known as an MArrayLM object). When we inspect the coefficients element now, we can see that each column is a contrast that we specified in our contrast matrix. vfit &lt;- contrasts.fit(vfit, contrasts = contr.matrix) head(vfit$coefficients) ## Contrasts ## BasalvsLP BasalvsML LPvsML ## 497097 7.5145557 6.96864007 -0.54591559 ## 20671 2.7568708 2.29302094 -0.46384989 ## 27395 0.4260347 -0.03826548 -0.46430022 ## 18777 0.2308732 -0.44710891 -0.67798213 ## 21399 0.3090294 0.33449065 0.02546125 ## 58175 -5.5110274 -5.06368468 0.44734272 4.6 Statistical testing The next step is to carry out statistical testing to determine which genes are differentially expressed. The function eBayes() computes moderated t-statistics, moderated F-statistics and log-odds of differential expression for each gene, given a fitted linear model. ‘Moderated’ refers to empirical Bayes moderation, which borrows information across genes to obtain more accurate measures of variability for each gene. This also increases our power to detect differentially expressed genes. efit &lt;- eBayes(vfit) We can now look at the number of differentially expressed genes using the decideTests() function. The output of this function is a matrix where each column is a contrast (comparison of interest) and each row is a gene. The numbers 1, -1 and 0 mean up-regulated, down-regulated or not significantly differentially expressed, respectively. Note that decideTests() also accounts for multiple testing. The default method is Benjamini and Hochberg (Benjamini and Hochberg 1995) but several others are also available. dt &lt;- decideTests(efit) dt ## TestResults matrix ## Contrasts ## BasalvsLP BasalvsML LPvsML ## 497097 1 1 0 ## 20671 1 1 0 ## 27395 0 0 0 ## 18777 0 -1 -1 ## 21399 0 1 0 ## 16619 more rows ... To obtain the total number of differentially expressed genes for each comparison, we can add the function summary(): summary(dt) ## BasalvsLP BasalvsML LPvsML ## Down 4500 4850 2701 ## NotSig 7307 6996 11821 ## Up 4817 4778 2102 The function topTable() can be used to obtain more information on the differentially expressed genes for each contrast. topTable() takes as arguments the MArrayLM object output by eBayes() (efit), the contrast name of interest and the number of top differentially expressed genes to output. Note that the contrast name must be given in quotes and must be exactly as written in the contrast matrix contr.matrix. It outputs a data frame with the following information: Gene details - gene information, from the gene element of the MArrayLM object (efit). logFC - the log2 fold change of the contrast. AveExpr - the average log2 expression of that gene. t - moderated t-statistic. P.Value - p value. adj.P.Val - adjusted p value. B - log-odds that the gene is differentially expressed. top &lt;- topTable(efit, coef = &quot;BasalvsLP&quot;, n = Inf) head(top) ## ENTREZID SYMBOL TXCHROM logFC AveExpr t P.Value ## 12521 12521 Cd82 chr2 -4.095479 7.069637 -35.46821 3.383539e-12 ## 22249 22249 Unc13b chr4 -4.350553 5.663171 -32.38571 8.648521e-12 ## 16324 16324 Inhbb chr1 -4.721417 6.460922 -30.80826 1.447137e-11 ## 14245 14245 Lpin1 chr12 -3.768977 6.294017 -29.94805 1.937313e-11 ## 218518 218518 Marveld2 chr13 -5.215232 4.930008 -30.87689 1.414332e-11 ## 12759 12759 Clu chr14 -5.306847 8.856581 -29.55253 2.221529e-11 ## adj.P.Val B ## 12521 4.660973e-08 18.41326 ## 22249 4.660973e-08 17.42652 ## 16324 4.660973e-08 17.06291 ## 14245 4.660973e-08 16.85869 ## 218518 4.660973e-08 16.76959 ## 12759 4.660973e-08 16.70221 With that we can complete our analysis by writing out some results write.csv(top, file = &quot;BasalvsLP.csv&quot;) 4.7 MA Plot The MA plot is a plot of log-fold-change (M-values) against log-expression averages (A-values), this is a common plot in RNA sequencing analysis to visualise the result of differential expression tests. It can be created using the plotMA() from the limma package. Creating this plot requires 3 pieces of information: object = efit: The the fitted object containing the log-fold-change and log-expression averages coef = 1: The column number of the contrast to plot since there are 3 different contrasts fitted within the object. status = dt[, 1]: A vector of numerics denoting whether a gene is up-regulated or down-regulated. plotMA(efit, coef = 1, status = dt[, &quot;BasalvsLP&quot;]) We can also save this plot programmatically as a PDF for further editing. To do this we use pdf() to turn on the pdf capture device, run the command that creates the plot, which is now captured by the pdf, and then turn the device off. pdf(file = &quot;BasalvsLP-MAPlot.pdf&quot;) plotMA(efit, coef = 1, status = dt[, &quot;BasalvsLP&quot;]) dev.off() Challenge 4.3 What are the symbols of the top 5 most differentially expressed genes in chromosome X based on adjusted p-value? Create a volcano (scatter) plot of log-fold-change on the x-axis and the p-value on y-axis. "]
]
