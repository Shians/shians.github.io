[
["index.html", "Introduction to Base R Preface 0.1 Data files", " Introduction to Base R 2020-10-16 Preface This introduction to base R course was designed for biologists with no previous programming experience. It has a focus on analysing RNA-sequencing data using the Bioconductor package limma. The F1000 paper ‘RNA-seq analysis is easy as 1-2-3 with limma, Glimma and edgeR’ was used as a guide for the later sessions. It is intended to be delivered over four 2.5 hour workshops at the Walter and Eliza Hall Institute of Medical Research (WEHI). 0.1 Data files You can download and unzip the files using the following commands download.file(&quot;https://github.com/Shians/BaseR_Intro/raw/master/data/workshop_data.zip&quot;, &quot;workshop_data.zip&quot;) unzip(&quot;workshop_data.zip&quot;, exdir = &quot;data&quot;) unzip(&quot;data/Ses3_counts.zip&quot;, exdir = &quot;data/counts&quot;) Acknowledgements This course material was originally produced by Lucy Liu and later modified by Shian Su. Thanks to Brendan Ansell and Professor Gordon Smyth for your suggestions and review of this tutorial. This page was generated using the bookdown package by YiHui Xie. The source code for this page can be found on Github. "],
["session-1.html", "Chapter 1 Session 1 1.1 R and RStudio 1.2 R scripts 1.3 Working directory 1.4 Maths 1.5 Comparisons 1.6 Functions 1.7 Variables 1.8 Data types 1.9 Data structures 1.10 Reading in data 1.11 Vectorised Operations 1.12 Writing out data", " Chapter 1 Session 1 In this first session we will learn about: R and RStudio Data types and data structures Vectorised operations Data input and output 1.1 R and RStudio R is a free and open source statistical programming language, great for performing data analysis. RStudio is a free and open source R integrated development environment (IDE) which makes it easier for you to write code. It does this by providing you with auto-completion (of variable names, function names, file paths etc.), helping with formatting and keeping track of your variables. You can think of R as the engine in a car and RStudio as the body &amp; controls. R is doing all the calculations/computations but RStudio makes it easier for you to use R. When you first open RStudio, there will be three panels - see Figure 1.1 (don’t worry if your RStudio does not have the same colours/appearance - different versions of RStudio look slightly different, and the colour here is not the default one.) Figure 1.1: Three panels in RStudio. Left panel: this panel features two tabs, ‘Console’, which is where you can type in commands for R to run and ‘Terminal’, which we won’t worry about in this course. Top right panel: Environment - in this tab you can see all variables you have created. History - R keeps track of all commands you have run and you can review them in this tab. Connections - this tab helps you connect to data sources but we will not be using it in this course. Bottom right: Files - you can explore your file directory here and we will use it to set our working directory later. Plots - plots that you create will either appear here or be saved to a file. Help - help files for R functions can be viewed in this tab. Help files tell you about what a function does and how to use it. Packages - basic R includes many useful functions. You can add even more functions by downloading packages. A package is a collection of functions, generally with a certain data analysis theme. For example, the package ‘limma’, which we will use later, includes functions for analysing RNA-sequencing data. Viewer - this tab lets you view local web content but we won’t be using it in this course. 1.2 R scripts To open an R script, go to File &gt; New File &gt; R Script. Figure 1.2: Opening a new R Script. This will open a fourth panel on the top left. Figure 1.3: Four panels, including a R Script. An R script is a text document where can type and run commands. You can also run commands in the console but the code run in the console is not saved. Note that to run a command in the Console press Enter key but to run a command in a R Script you must press Cmd/Ctrl + Enter keys. Lastly, you add ‘comments’ in your R Script. Comments are notes regarding the code that are not interpreted by R, they begin with #: # this is a note to myself 1 + 1 ## [1] 2 1.3 Working directory Every file on your computer is located in a specific location. This location can be referred to by a path. In Mac, paths look something like this: /Users/Lucy/Documents/. In Windows, paths look something like this: C:\\Users\\Lucy\\Documents\\. When you open an R session, it launches from a specific location. You can find out where this is using the command getwd(). This location is called the ‘working directory’. By default, R will look in this directory when reading in data and write out files/plots to this directory. It is often useful to have your data and R Scripts in the same directory and set this as your working directory. You can set your working directory to be anywhere you like and we will now do this: Make a folder for this course, somewhere sensible on your computer that you will be able to easily find. Go back to your RStudio window, go to the bottom right panel, click on the ‘Files’ tab and then click on the three dots on the top right hand corner (Figure 1.4). Figure 1.4: Setting the working directory - 1. This will open up a new window (Figure 1.5) which lets you explore the files and folders on your computer. Find the new folder you created, click on it then click ‘Open’. Figure 1.5: Setting the working directory - 2. The files tab will now show the contents of your new folder (which should be empty). At the top of the files tab, click on More &gt; Set As Working Directory (Figure 1.6). Figure 1.6: Setting the working directory - 3. Please set your working directory to be this folder at the start of EVERY session. 1.4 Maths R performs maths and follows standard order of operations. In order of highest to lowest precedence, here is how mathematical operations are denoted in R: () - parentheses ^ or ** - exponents / - divide * - multiply + - add - - subtract %% - remainder (modulus) 1 + 2 ## [1] 3 1 + 3 * 4 ## [1] 13 (1 + 3) * 4 ## [1] 16 10 %% 3 ## [1] 1 1.5 Comparisons R can perform comparisons: == equal to. != not equal to. &gt; greater than. &gt;= greater or equal to. &lt; less than. &lt;= less than or equal to. These operations return a TRUE or a FALSE value. This can be used to quickly summarise data or perform indexing as we will see later. 10 &gt; 10 # FALSE ## [1] FALSE 10 &gt;= 10 # TRUE ## [1] TRUE You can also compare words. R will use dictionary order to determine which word is ‘greater’. &quot;cat&quot; &gt; &quot;dog&quot; ## [1] FALSE 1.6 Functions Functions are expression in R that take inputs and produce outputs. Functions may take multiple inputs, also called ‘arguments’ to the function, each argument must be separated by comma. Arguments have a set order in which they can be given, or they can be referred to specifically by their name. pi ## [1] 3.141593 round(pi, digits = 3) ## [1] 3.142 Many arguments have default values so you don’t need to specify every argument for every function. You can check the arguments of a function by using args(). args(rnorm) ## function (n, mean = 0, sd = 1) ## NULL Sometimes it’s obvious what the arguments are, but if more details are needed then you can access the help pages. This can be one in one of two ways, by searching for the function in the help panel. Figure 1.7: Accessing help files via ‘help’ tab. Or using the command ? followed by the name of the function: ?sum Help files are very useful but can be difficult to interpret at first due to the technical language used. It is often helpful to scroll down to the bottom to see examples of how the function is used. 1.7 Variables A variable in R is an identifier to keep track of values. We assign values to variables so that we can refer to the variable later. For example, I can do some maths: 2 + 6 * 7^2 ## [1] 296 R outputs simply the result. To use this value later, I would need to assign the output to a variable. You can this with &lt;- (shortcut = alt + -) in R. (You can also use =, however, stylistically &lt;- is preferred.) Here R first performs the calculation on the right of &lt;- and then saves the result as a variable called my_num. my_num &lt;- 2 + 6 * 7^2 my_num # 296 ## [1] 296 Note that variable names are case sensitive. var &lt;- 10 VAR # produces error because VAR is not the same as var ## Error in eval(expr, envir, enclos): object &#39;VAR&#39; not found You can also ‘overwrite’ variables by assigning to them again: my_num &lt;- 3 * 4 my_num # 12 ## [1] 12 Because the right hand side is evaluated first, you can also assign to a variable a calculation that involves itself. my_num &lt;- my_num + 5 my_num # 17 ## [1] 17 R has rules on valid variable names. Variable names can only contain letters, numbers, the dot or underline characters. They can only start with a letter or the dot followed by a letter. If we try to create a variable that starts with a number, R will return an error: 2myvar &lt;- 2 + 6 * 7^2 # not a valid name as it start with number ## Error: &lt;text&gt;:1:2: unexpected symbol ## 1: 2myvar ## ^ Challenge 1.1 Guess the output the result of the following expression then evaluate them to check. 4 +2 ^ 2 (4 + 2) ^ 2 &quot;genotype&quot; &lt; &quot;phenotype&quot; !(&quot;genetics&quot; &lt; &quot;epigenetics&quot;) 25 %% 4 Which of the following are valid variable names? Those that are not, why are they not valid? var var2 2var var-2 var.2 What is the value of z once this code has run? x &lt;- 3 y &lt;- 12 x &lt;- x + 3 z &lt;- y - x z &lt;- z * 2 1.8 Data types Every variable in R has a ‘type’. The type tells R what kind of data it is and consequently what it can and can’t do with the data. For example, it makes sense to perform mathematical functions on numbers but not on words. There are three basic types of data in R: logical - either TRUE or FALSE numeric - numbers character - text surrounded by quotation marks These are called ‘atomic’ data types as they are the most basic types of data from which other data types usually derive. You can find the type of a variable using the class() function. 1 # prints as 1 &quot;1&quot; # prints as &quot;1&quot; class(TRUE) # logical class(1) # numeric class(&quot;hello&quot;) # character class(&quot;TRUE&quot;) # character class(&quot;123&quot;) # character 1 + 1 # works ## [1] 2 &quot;1&quot; + &quot;1&quot; # produces error ## Error in &quot;1&quot; + &quot;1&quot;: non-numeric argument to binary operator !TRUE # works ## [1] FALSE !&quot;TRUE&quot; # produces error ## Error in !&quot;TRUE&quot;: invalid argument type 1.8.1 Factors Factors are a special type for encoding categorical variables. They are composed of the ‘values’ and the ‘levels’, externally they look like characters variables, but internally they are a series of integers denoting the group number and a separate series of characters denoting the identity of the groups. x &lt;- factor(c(&quot;sunny&quot;, &quot;rainy&quot;, &quot;rainy&quot;, &quot;cloudy&quot;, &quot;sunny&quot;)) x ## [1] sunny rainy rainy cloudy sunny ## Levels: cloudy rainy sunny levels(x) ## [1] &quot;cloudy&quot; &quot;rainy&quot; &quot;sunny&quot; as.numeric(x) ## [1] 3 2 2 1 3 Factors are generally a more efficient way of storing categorical variables, it stores only the level value as an integer and a single instance of each unique level. It also makes it possible to quickly re-encode the levels. levels(x) &lt;- c(&quot;Cloudy&quot;, &quot;Rainy&quot;, &quot;Sunny&quot;) x ## [1] Sunny Rainy Rainy Cloudy Sunny ## Levels: Cloudy Rainy Sunny We can set the order of the levels if we would like using the levels argument. x &lt;- factor( c(&quot;low&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;high&quot;, &quot;low&quot;), levels = c(&quot;low&quot;, &quot;high&quot;, &quot;medium&quot;) ) x ## [1] low medium medium high low ## Levels: low high medium Setting these levels can change the behaviour of the variable in models or plots. 1.9 Data structures Data structures are ways to organise many values without having to assign individual names to each value. They help us keep related data together in a single variable and offer powerful ways for us to interact with that data. Three commonly used data structures are summarised below: Figure 1.8: Data structures. Source: http://libguides.wellesley.edu. Another useful data structure is a ‘list’, which we will talk about in Session 3. 1.9.1 Vector A vector is a collection of values of the same type. Values in a vector are laid out linearly, one after another. You can create vectors with the c() function (‘c’ for ‘combine’): my_vect1 &lt;- c(1, 2, 3) # a vector of numbers my_vect2 &lt;- c(&quot;a&quot;, &quot;vector&quot;, &quot;of&quot;, &quot;characters&quot;) # a vector of characters One useful shorthand for creating a sequence of integers is a:b which creates a vector from a to b. 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 3:7 ## [1] 3 4 5 6 7 For very long vectors, it is useful to use the head and tail functions to inspect just a few values. These print the first and last 6 elements of a vector. head(1:10000) ## [1] 1 2 3 4 5 6 tail(1:10000) ## [1] 9995 9996 9997 9998 9999 10000 1.9.2 Matrix A matrix is the two-dimensional extension of the vector, it stores a collection of values of the same type but laid out in a grid with rows and columns. An example of this is a gene count matrices where each genes are represented by the rows, samples are represented by the columns and each cell represents a count for a particular gene in a particular column. The rows and columns can also be labelled with names, but these names are usually considered metadata rather than being a part of the matrix. gene_counts &lt;- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2) rownames(gene_counts) &lt;- c(&quot;gene1&quot;, &quot;gene2&quot;) colnames(gene_counts) &lt;- c(&quot;sample1&quot;, &quot;sample2&quot;) class(gene_counts) ## [1] &quot;matrix&quot; &quot;array&quot; gene_counts ## sample1 sample2 ## gene1 1 3 ## gene2 2 4 1.9.3 Data Frame Data frames are similar to matrices in that they store data in rows and columns. The difference is that the data within each column can be of different types. This is the representation used for general tables that record different attributes of individual entries along the rows. A classic example of a data frame is the iris dataset. data(iris) class(iris) iris # prints the whole data frame and floods the screen The head() and tail() functions also work here to print the first and last 6 rows of a data frame for a quick check of the data. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica We can construct a data frame of our own as well using data.frame() my_df &lt;- data.frame( mouse_id = c(&quot;mouse1&quot;, &quot;mouse2&quot;, &quot;mouse3&quot;), age = c(48, 48, 52), weight = c(39.7, 42.2, 46.3) ) class(my_df) ## [1] &quot;data.frame&quot; my_df ## mouse_id age weight ## 1 mouse1 48 39.7 ## 2 mouse2 48 42.2 ## 3 mouse3 52 46.3 The general form for constructing a data frame looks like this data.frame(col_name1 = values1, col_names2 = values2, ...) Where each value is a vector of the same length. You can access a column in a data frame with the shortcut $. Notice that the names of all columns of the data frame appears after typing in my_df$: Figure 1.9: Accessing columns in a dataframe using the ‘$’ symbol. Challenge 1.2 Create a data frame with the columns “name”, “age”, and “height” with 3 rows of whatever value you choose. Guess the values of the following expressions x &lt;- c(2, 3, 4) y &lt;- c(2, 2, 3) z &lt;- x + y # i. x + 3 # ii. z[3] # iii. (x + y) &lt; 5 # iv. sum(z) 1.10 Reading in data Let’s read in some data and start exploring it. You should have received the data files via email before the course. Please download these files and make sure they are located in your working directory. Recall, we set our working directory above. You can find the location of your working directory with the function getwd(). If you are following along outside of the WEHI course, you can download the data files from Github - instructions for downloading data from GitHub can be found in the Preface. The file we want to read in is named ‘Ses1_genes.tsv’. All the data files are in a directory called ‘data’ - thus the path to the file (relative to my working directory) is ‘data/Ses1_genes.tsv’. Depending on where you have put your data (in your working directory or in another file in your working directory), the path to your file ‘Ses1_genes.tsv’ may be different. read.delim(&quot;data/Ses1_genes.tsv&quot;) ## SYMBOL GeneLength Count ## 1 Gm10568 1634 0 ## 2 Gm19860 799 4 ## 3 Gm19938 3259 0 ## 4 Lypla1 2433 768 ## 5 Rp1 9747 0 ## 6 Sox17 3130 1 ## 7 Tcea1 2847 810 ## 8 Mrpl15 4203 431 ## 9 Xkr4 3634 1 ## 10 Rgs20 2241 452 Note that read.delim() also lets you specify character that separates columns of the data. The most common types are comma-separated values (csv) and tab-separated values (tsv). Example of a csv file: Name, Age Andy, 10 Bob, 8 Example of a tsv file: Name Age Andy 10 Bob 8 By default read.delim() uses the tab separator \". We can see what happens if we use the wrong separator in our read.delim call. read.delim(&quot;data/Ses1_genes.tsv&quot;, sep = &quot;,&quot;) ## SYMBOL.GeneLength.Count ## 1 Gm10568\\t1634\\t0 ## 2 Gm19860\\t799\\t4 ## 3 Gm19938\\t3259\\t0 ## 4 Lypla1\\t2433\\t768 ## 5 Rp1\\t9747\\t0 ## 6 Sox17\\t3130\\t1 ## 7 Tcea1\\t2847\\t810 ## 8 Mrpl15\\t4203\\t431 ## 9 Xkr4\\t3634\\t1 ## 10 Rgs20\\t2241\\t452 If you just read in the data, R simply prints the values out in the console. Let’s assign our data frame to a variable called genes: genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;) Notice how genes now appears in our ‘Environment’ tab: Figure 1.10: Variable in ‘Environment’ tab. All variables that we create will be shown in this tab, so it is a useful way to keep track of variables that we have created. Notice how R also tells us that there are 10 observations (rows) and 3 variables (columns) in the genes data frame. One quirk that older versions of R has is that columns of character strings are automatically converted to factors. Factors look like characters when printed out, but can cause errors if you actually treat them as characters. It’s generally wise to turn off this automatic conversion. If your R is newer than version 4.0.0 then stringsAsFactors is off by default. genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = TRUE) str(genes) # the SYMBOL column is of type factor ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : Factor w/ 10 levels &quot;Gm10568&quot;,&quot;Gm19860&quot;,..: 1 2 3 4 7 8 9 5 10 6 ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 genes &lt;- read.delim(&quot;data/Ses1_genes.tsv&quot;, stringsAsFactors = FALSE) str(genes) # the SYMBOL column is now of type character ## &#39;data.frame&#39;: 10 obs. of 3 variables: ## $ SYMBOL : chr &quot;Gm10568&quot; &quot;Gm19860&quot; &quot;Gm19938&quot; &quot;Lypla1&quot; ... ## $ GeneLength: int 1634 799 3259 2433 9747 3130 2847 4203 3634 2241 ## $ Count : int 0 4 0 768 0 1 810 431 1 452 1.11 Vectorised Operations In contrast to some other programming languages where operating on vectors requires a loop structure, operations in R are generally vectorised, meaning they will be automatically applied to each element of the vector. genes$Count # each column of a data frame is a vector ## [1] 0 4 0 768 0 1 810 431 1 452 genes$Count + 10 # adds 10 to each element ## [1] 10 14 10 778 10 11 820 441 11 462 genes$Count == 0 # perform a comparison with each element ## [1] TRUE FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE genes$Count &lt; 100 ## [1] TRUE TRUE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE This can be useful for creating new columns based on existing data genes$Expressed &lt;- genes$Count != 0 When assigning in this way, an existing column may be overwritten. If the column assigned to does not exist, a new column is created. Challenge 1.3 Create a new column called Prop_Count that contains each count value as a proportion of the total count value of all 10 genes in the data frame. E.g. if Count was 10 and total count of all 10 genes is 100, that row in Prop_Count should be 0.1. Hint use the sum() function. 1.12 Writing out data The last thing we will do this session is learn to write out data using the function write.table(). There are a few things we must tell write.table(), for it to be able to write out the data the way we want: x - the name of this input is not very informative, but first you must tell the function what you want to write out. In our case we want to write out our dataframe genes. file - the name of the file that we want to write to. sep - how each value in our output file is separated. Common file formats are ‘csv’ and ‘tsv’ (discussed above). In R, a tab is represented by \"\\t\". row.names - this is either TRUE or FALSE, and let’s you specify whether you want to write out row names. If your dataframe does not have row names, put FALSE. col.names - this is also either TRUE or FALSE, and let’s you specify whether you want to write out column names. If your dataframe has column names, put TRUE. We can write out our genes data frame into a .tsv file using the command below: write.table(x = genes, file = &quot;Ses1_Genes_output.tsv&quot;, sep = &quot;\\t&quot;, row.names = FALSE, col.names = TRUE) "],
["session-2.html", "Chapter 2 Session 2 2.1 Missing values 2.2 Subsetting vectors 2.3 Subsetting data structures 2.4 Merge", " Chapter 2 Session 2 In the previous session we learned about: The RStudio environment Mathematical and logical operations Using functions Variables Atomic and collection data types Input and output In this session we will learn about: Missing values Subsetting data structures How to merge two dataframes 2.1 Missing values Missing values are fairly common in data, we will look at how to deal with missing values in R. First, let’s read in some data. Recall we use the function read.delim() and tell R not to read strings as factors using stringsAsFactors = FALSE. We are using the file “Ses2_genes.tsv” today. genes &lt;- read.delim(&quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE) dim(genes) # returns number of rows and columns ## [1] 200 5 head(genes) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 missing chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 You can see in the environment tab that this data frame has 200 rows (observations) and 5 columns (variables). You can also click on the genes entry in the Environment tab (red arrow in Figure 2.1) to display the data in a new window (left): Figure 2.1: Viewing data from the ‘Environment’ tab. Scrolling down the window, you can see that there are several NA entries. NA denotes a missing value in R. NA‘s have some interesting behaviour - they are ’contagious’. For example, if we wanted to take the mean of a vector numbers, which includes a NA, the answer is NA. If we think about it, it makes sense that the mean of two numbers and a ‘missing’ number, that could be anything, is NA. mean(c(2, 3, NA)) ## [1] NA Luckily many mathematical functions have a na.rm option, where you can tell it to remove NA values: mean(c(2, 3, NA), na.rm = TRUE) ## [1] 2.5 Finding out if something is NA is also a bit different, due to the nature of the missing value. So we must use the is.na() function rather than a direct comparison. NA == NA # returns NA rather than TRUE ## [1] NA is.na(NA) ## [1] TRUE is.na(c(2, 3, NA)) ## [1] FALSE FALSE TRUE One last thing to note is that in our data, the symbol of the third row is “missing”, and the 30th row is “Missing”. These are other representations of missing values found in our data that is not detect as such by R. We can change the value to NA in our original data, but generally we don’t want to edit our raw data. Instead we can tell read_delim() what values should be interpreted as NA via the na.strings argument. genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) 2.2 Subsetting vectors Subsetting involves selecting a portion of a data structure and uses square brackets [ ]. There are two main ways to subset a data structure: numerical or logical indices. 2.2.1 Subsetting with numeric indicies Let’s take a look at subsetting vectors first. We can use $ to obtain just one column from the genes data frame. The output will be a vector. genes$Count ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 700 ## [13] 2075 351 22 0 0 893 3 100 32100 269 34 20005 ## [25] 5751 0 275 9 849 7175 768 358 234 5065 2096 1994 ## [37] 757 0 2310 0 1 0 3091 810 30 816 817 1 ## [49] 580 33 0 941 1445 522 2 2346 572 431 5797 2 ## [61] 70 1236 966 235 2 3009 431 452 2602 3481 99 11857 ## [73] 35 1952 0 706 1317 1130 92 0 871 730 3892 3772 ## [85] 20 7 0 756 1 210 101 17 21 537 1240 930 ## [97] 1 1 0 221 1599 0 67 1 0 315 0 0 ## [109] 739 0 0 976 1 715 18636 289 1396 0 101 285 ## [121] 1665 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 0 ## [145] 0 0 0 0 2442 30 1610 0 0 0 16 1 ## [157] 2 0 47 0 1118 0 1 0 2 3 22 0 ## [169] 0 0 0 0 0 0 431 0 0 16 0 1 ## [181] 0 4 0 0 1 0 0 0 0 301 0 0 ## [193] 0 0 0 0 0 0 0 59 We will assign this to a variable called counts. counts is now a variable that refers to a vector containing 200 integers. counts &lt;- genes$Count counts ## [1] 979 15 932 0 214 2 2 0 1790 41 1033 700 ## [13] 2075 351 22 0 0 893 3 100 32100 269 34 20005 ## [25] 5751 0 275 9 849 7175 768 358 234 5065 2096 1994 ## [37] 757 0 2310 0 1 0 3091 810 30 816 817 1 ## [49] 580 33 0 941 1445 522 2 2346 572 431 5797 2 ## [61] 70 1236 966 235 2 3009 431 452 2602 3481 99 11857 ## [73] 35 1952 0 706 1317 1130 92 0 871 730 3892 3772 ## [85] 20 7 0 756 1 210 101 17 21 537 1240 930 ## [97] 1 1 0 221 1599 0 67 1 0 315 0 0 ## [109] 739 0 0 976 1 715 18636 289 1396 0 101 285 ## [121] 1665 47 2 4483 2 363 169 135 0 2 0 11 ## [133] 4088 1082 92 0 3888 17 0 0 0 0 0 0 ## [145] 0 0 0 0 2442 30 1610 0 0 0 16 1 ## [157] 2 0 47 0 1118 0 1 0 2 3 22 0 ## [169] 0 0 0 0 0 0 431 0 0 16 0 1 ## [181] 0 4 0 0 1 0 0 0 0 301 0 0 ## [193] 0 0 0 0 0 0 0 59 This will give you the 3rd element of the vector counts: counts[3] ## [1] 932 It is also possible to give a vector of indices, this returns a vector of the same length as the indices given containing the elements corresponding to each index. # return the 3rd to 10th elements counts[3:10] ## [1] 932 0 214 2 2 0 1790 41 The indices do not need to be sequential, nor do they need to be unique or in ascending order. # get the 3rd, 5th and 100th elements counts[c(3, 5, 100)] ## [1] 932 214 221 # get the 3rd element twice, and the 5th element counts[c(3, 3, 5)] ## [1] 932 932 214 # get the 100th, 3rd, and 5th elements counts[c(100, 3, 5)] ## [1] 221 932 214 Note that we have used c() within the square brackets. This is because R expects ONE ‘object’ within the square brackets. Thus, if you want to extract several indices, you must give it ONE vector containing the indices of the elements. A vector (e.g. c(3,5,10)) is considered one ‘object’ but the numbers 3,5,10 are considered three different ‘objects’. Indeed, 3:10, which we used earlier, is actually a vector of the numbers 3 to 10: 3:10 ## [1] 3 4 5 6 7 8 9 10 We can also use the - sign to index all the elements EXCEPT the elements 10 through to 200: counts[-(10:200)] ## [1] 979 15 932 0 214 2 2 0 1790 Note that subsetting past the end of a vector returns NA. short_vec &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) short_vec[5] ## [1] NA short_vec[c(1, 3, 5)] ## [1] &quot;a&quot; &quot;c&quot; NA 2.2.2 Subsetting with logical vectors The alternative way to subset is using a logical vector of the same length as the vector being indexed. Each element of the logical vector denotes whether or not that element of the original vector will be returned in the result. # take the 1st, 2nd and 4th elements from short_vec short_vec[c(TRUE, TRUE, FALSE, TRUE)] ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; You will rarely write out these logicals by hand, instead they usually come from a comparisons, for example if we wanted to take only the non-zero values of counts counts[counts != 0] ## [1] 979 15 932 214 2 2 1790 41 1033 700 2075 351 ## [13] 22 893 3 100 32100 269 34 20005 5751 275 9 849 ## [25] 7175 768 358 234 5065 2096 1994 757 2310 1 3091 810 ## [37] 30 816 817 1 580 33 941 1445 522 2 2346 572 ## [49] 431 5797 2 70 1236 966 235 2 3009 431 452 2602 ## [61] 3481 99 11857 35 1952 706 1317 1130 92 871 730 3892 ## [73] 3772 20 7 756 1 210 101 17 21 537 1240 930 ## [85] 1 1 221 1599 67 1 315 739 976 1 715 18636 ## [97] 289 1396 101 285 1665 47 2 4483 2 363 169 135 ## [109] 2 11 4088 1082 92 3888 17 2442 30 1610 16 1 ## [121] 2 47 1118 1 2 3 22 431 16 1 4 1 ## [133] 301 59 # you can also store the indices in a variable first non_zero &lt;- counts != 0 counts[non_zero] ## [1] 979 15 932 214 2 2 1790 41 1033 700 2075 351 ## [13] 22 893 3 100 32100 269 34 20005 5751 275 9 849 ## [25] 7175 768 358 234 5065 2096 1994 757 2310 1 3091 810 ## [37] 30 816 817 1 580 33 941 1445 522 2 2346 572 ## [49] 431 5797 2 70 1236 966 235 2 3009 431 452 2602 ## [61] 3481 99 11857 35 1952 706 1317 1130 92 871 730 3892 ## [73] 3772 20 7 756 1 210 101 17 21 537 1240 930 ## [85] 1 1 221 1599 67 1 315 739 976 1 715 18636 ## [97] 289 1396 101 285 1665 47 2 4483 2 363 169 135 ## [109] 2 11 4088 1082 92 3888 17 2442 30 1610 16 1 ## [121] 2 47 1118 1 2 3 22 431 16 1 4 1 ## [133] 301 59 Indices are like shopping lists, each element of the index tell us what we need from the original vector. In numerical indices it tells us the position in the vector to take values from, and in logical indices it tells us whether each element should be included in the result. 2.2.3 Useful summaries of logical vectors Two relevant function that are useful to know is the which() and table(). which() takes a logical vector and tells you the indices of the TRUE elements. table() takes any vector and gives you counts of the unique elements, for logical vectors this counts the TRUE and FALSE. which(c(TRUE, FALSE, FALSE, TRUE)) ## [1] 1 4 table(c(TRUE, FALSE, FALSE, TRUE)) ## ## FALSE TRUE ## 2 2 Challenge 2.1 Predict the return values of the following expressions. # i. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) x[c(2, 1, 1, 3)] # ii. c(1, 2, 3, NA) + 1 # iii. x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) x[c(TRUE, FALSE, TRUE, TRUE)] Take the following vector and create two subsets of it that are &lt;=5 and &gt;5. How many elements are in each subset? vec &lt;- c(5.16, 7.09, 8.08, 7.6, 3.04, 9.35, 4.68, 8.29, 8.26, 7.38, 5.87, 7.43, 4.52, 6.09, 8.52, 6.03, 4.05, 6.11, 0.9, 2.79, 1.54, 4.57, 3.51, 1.95, 5.72, 6.04, 4.29, 3.47, 1.76, 5.25, 9.91, 2.73, 7.42, 4.85, 6.41, 5.2, 5.8, 3.22, 8.18, 9.96 ) Using numeric indices, create the word c(\"h\", \"e\", \"l\", \"l\", \"o\") from the following vector. i.e. something of the form letter_vec[c(...)]. letter_vec &lt;- c(&quot;e&quot;, &quot;h&quot;, &quot;l&quot;, &quot;o&quot;) 2.2.4 Overwriting subset values You can assign to a subset of a vector to change the values of that subset within a vector. values_vec &lt;- c(1, 2, 3, 4, 5) values_vec[c(3, 5)] &lt;- 10 values_vec ## [1] 1 2 10 4 10 This also works with logical vectors in the similar way. values_vec &lt;- c(1, 2, 3, 4, 5) values_vec[c(FALSE, FALSE, TRUE, FALSE, TRUE)] &lt;- 10 values_vec ## [1] 1 2 10 4 10 2.3 Subsetting data structures Subsetting a 2 dimensional data structure (e.g. a data frame or a matrix) is similar to subsetting a vector, except you now must specify which rows AND which columns you want. The general syntax for the genes data frame looks like this: genes[(rows you want) , (columns you want)] Within the square brackets, you will specify which rows you want, followed by a comma, then what columns you want. 2.3.1 Subsetting data structures with numerics As with vectors, you can use numeric vectors to select the rows and columns you want. # take the 5th to 9th rows and the 2nd and 4th columns. genes[5:9, c(2,4)] ## SYMBOL GeneLength ## 5 Ccnf 3099 ## 6 Cdh6 2632 ## 7 Cdh9 2903 ## 8 Chat 2810 ## 9 Clock 7478 2.3.2 Subsettting data frames using characters Recall that we could select individual columns of the data frames using the $ operator along with the column name. We can also select multiple columns using a vector of column names. Note that column names are enclosed in quotes signifying that they are of the ‘character’ data type. genes[5:9, c(&quot;SYMBOL&quot;, &quot;GeneLength&quot;)] ## SYMBOL GeneLength ## 5 Ccnf 3099 ## 6 Cdh6 2632 ## 7 Cdh9 2903 ## 8 Chat 2810 ## 9 Clock 7478 If you leave the left side of comma empty, R will give you ALL the rows. If you leave the right side of the comma empty, R will give you ALL the columns. This will give you only two columns of the data frame. genes[, c(&quot;SYMBOL&quot;, &quot;Count&quot;)] This will give you the 2nd row and all the columns. genes[2, ] ## EntrezID SYMBOL TXCHROM GeneLength Count ## 2 11634 Aire chr10 1929 15 2.3.3 Removing NA rows using complete.cases() Because of the care required when working with missing values, it is sometimes an option to simply remove all entries that are not complete. This can be done using the complete.cases() function. This function returns a logical vector indicating whether each row of a data frame contains no missing values. # returns logical of same length as number of rows in genes complete.cases(genes) # can be used to filter rows down to only complete rows complete_genes &lt;- genes[complete.cases(genes), ] complete_genes Challenge 2.2 Take the following counts vector and overwrite all values below 10 with the value 0. counts2 &lt;- genes$Count Take the following character vector and using a subset reasisgnment, create the word c(\"g\", \"e\", \"n\", \"e\", \"t\", \"i\", \"c\", \"s\"). char_vec &lt;- c(&quot;*&quot;, &quot;*&quot;, &quot;n&quot;, &quot;*&quot;, &quot;t&quot;, &quot;i&quot;, &quot;*&quot;, &quot;s&quot;) Take the genes data frame and select the symbol, chromosome and count columns of only complete cases that are not missing gene symbols. 2.3.4 Rearranging using the order() function We have seen before that numeric indices can be used to change the order of the output relative to the original input. A common application of this is to arrange a table by the values in some column using the order() function. The order function returns a vector of numerics of the same length with values such that the the vector would be sorted. # order returns a vector of numerics that can be use to index order(genes$TXCHROM) # using this to index will result in a sorted vector genes$TXCHROM[order(genes$TXCHROM)] # it can also be applied to data frames to sort by a column genes[order(genes$TXCHROM), ] # multiple arguments can be given to order to sort by multiple columns genes[order(genes$TXCHROM, genes$SYMBOL), ] 2.3.5 Subsetting data structures with logicals One very useful operation is to subset a whole table based on the values of a particular column. As an example, we subset our genes table to only the genes with a count of at least 100. counts[counts &gt; 100] genes[genes$Count == 0, ] # subset all the genes with 0 counts and every column genes[genes$Count == 0, ] # subset all the genes with &gt;0 counts and every column genes[genes$Count &gt; 0, ] This allows tables to be filtered based on a specific column. 2.3.6 %in%, &amp; and | The %in% operator tests whether elements of the first vector is contained within the second vector. It will return TRUE where the elements of the first vector is found in the second. # %in% operator tests membership c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) %in% c(&quot;b&quot;, &quot;d&quot;) # result of in can be used as a filtering for multiple matches genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;) genes[genes$TXCHROM %in% c(&quot;chr1&quot;, &quot;chr2&quot;), ] The &amp; (AND) operator takes two logical vectors and performs an AND operation on them, this means that along the positions of the two vectors, TRUE is returned only if it is TRUE in those positions of both vectors. Rather than thinking about the logcail AND operation, it’s easier to just read the expression literally. For example if we wanted to select genes from chromosome 1 and with counts greater than 500, we use the following row index. genes[genes$TXCHROM == &quot;chr1&quot; &amp; genes$Count &gt; 500, ] The | (OR) is a complementary operation that takes two logical and performs an OR operation, this returns TRUE if one or both values are TRUE. Once again we can simply read the expression literally. If we wanted genes that are from chromosome 1 or have counts greater than 500 we can use the following row index. genes[genes$TXCHROM == &quot;chr1&quot; &amp; genes$Count &gt; 500, ] 2.4 Merge Two dataframes can be combined with the merge() function. For example, let’s say we have two dataframes (dataframe1 and dataframe2), each containing different information about 3 genes: Figure 2.2: The two dataframes to merge. We can merge these dataframes together into one data frame that contains all the information about genes. Notice that the order of the genes is not the same in the two dataframes. During the merge we want R to match each row according to the Gene column in each data frame such that the correct information is added to the correct row. The result would have 4 columns, 3 rows and the correct information along each row. Figure 2.3: The two dataframes merged. Let’s practice merging on the files “Ses2_genes.tsv” and “Ses2_geneNames.tsv”. “Ses2_genes.tsv” contains gene EntrezIDs, gene symbol, gene chromosome, gene length and their count value. “Ses2_geneNames.tsv” contains gene names and their corresponding EntrezIDs. First we will read in both files: genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) gene_names &lt;- read.delim( &quot;data/Ses2_geneNames.tsv&quot;, stringsAsFactors = FALSE ) What we want to do now, is to merge the two data frames into one data frame with 6 columns, containing the information from both data frames. We also want to make sure that when R merges the data frames, the correct information is added to the correct row. You will notice that both the genes and gene_names data frames have a column giving the EntrezIDs. This column can be used as the “index” or “ID” column to make sure the correct information is added to each row. We can do this by telling merge() to match rows in the two data frames using EntrezIDs during the merge. merge() has the following syntax: merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first data frame by.y = # name of the column to match in the second data frame ) Thus, to merge our two dataframes, using the EntrezID column of each data frame to match rows, we can use: genes2 &lt;- merge(x = genes, y = gene_names, by.x = &quot;EntrezID&quot;, by.y = &quot;ENTREZID&quot;) head(genes2) ## EntrezID SYMBOL TXCHROM GeneLength Count ## 1 11480 Acvr2a chr2 5681 979 ## 2 11634 Aire chr10 1929 15 ## 3 12156 &lt;NA&gt; chr2 2515 932 ## 4 12290 Cacna1e chr1 12697 0 ## 5 12449 Ccnf chr17 3099 214 ## 6 12563 Cdh6 chr15 2632 2 ## GENENAME ## 1 activin receptor IIA ## 2 autoimmune regulator (autoimmune polyendocrinopathy candidiasis ectodermal dystrophy) ## 3 bone morphogenetic protein 2 ## 4 calcium channel, voltage-dependent, R type, alpha 1E subunit ## 5 cyclin F ## 6 cadherin 6 You may have noticed that there are 200 rows in the genes data frame but 290 rows in the gene_names data frame. This means that there are more genes in the gene_names data frame than there are in the genes data frame. This means that there are a few ways to merge the two data frames. We can either keep all rows from both data frames, keep only rows where there is a corresponding “index” value in both dataframes or keep only rows from one of the two data frames. We can specify which rows to keep using the following additional arguments in merge(): merge( x = # name of the first dataframe to merge y = # name of the second dataframe to merge by.x = # name of the column to match, in the first dataframe by.y = # name of the column to match in the second dataframe all.x = # logical. If TRUE, keep all rows from the first dataframe, # even if does not have a matching row in the second dataframe all.y = # logical. If TRUE, keep all rows from the second dataframe, # even if does not have a matching row in the second dataframe ) By default, merge() will only keep rows that have corresponding “index” values in both data frames. Challenge 2.3 Take the genes data frame and filter down to only genes from the first 3 chromosomes. Take the result of question 1 and sort it by chromosome then count. i.e. genes in the result should be grouped by chromosome, then count. Merge the data frames genes and gene_names and keep all rows from both data frames. "],
["session-3.html", "Chapter 3 Session 3 3.1 Basic plotting 3.2 Lists 3.3 Classes 3.4 Packages", " Chapter 3 Session 3 In this session we will learn: Basic plotting The list data structure Classes The DGEList object from the package limma 3.1 Basic plotting R is great for creating publication quality plots. There is an enormous number of plotting functions available through external packages, but we’ll only briefly cover the basic plots included with R. We will use our genes data from the previous session to demonstrate the plots. genes &lt;- read.delim( &quot;data/Ses2_genes.tsv&quot;, stringsAsFactors = FALSE, na.strings = c(&quot;NA&quot;, &quot;missing&quot;, &quot;Missing&quot;) ) 3.1.1 Scatter plots Scatter plots can be created using the plot() function. This plot is used to compare two variables against each other. There are two ways to use plot(), by specifying the x and y variables or by putting in a special notation using ~. For the version using x and y values the input the equal length vectors for x and y axis values as two arguments. # y~x style plot(genes$GeneLength, genes$Count) For the version using ~ you put in y ~ x as column names from a data frame and the data frame to be used as arguments. # ~ style plot(Count ~ GeneLength, data = genes) The basic scatter plot has many options that can be found in the help page. For example we can change the title of the plot, the axes and the take the log of one axis. plot( Count ~ GeneLength, data = genes, main = &quot;Count vs Gene Length&quot;, xlab = &quot;Gene Length&quot;, ylab = &quot;Count&quot; ) 3.1.2 Histograms Histograms are used to show the distribution of single variables. In R they are created using the hist() function. hist(genes$GeneLength) 3.1.3 Boxplots Box plots are used to visualise the distribution of values by their medians, quartiles and interquartile ranges. It can be useful for comparing the distribution of multiple groups. The simplest way to create a boxplot is to use the format x ~ group, where x is the variable on the y-axis and group is the grouping variable along the x-axis. For example we can create box plots of the gene lengths across chromosomes. boxplot(GeneLength ~ TXCHROM, data = genes) 3.2 Lists We previously saw the data structures vectors, matrices and data frames. These help us track collections of related data values using a single variable. Another fundamental data structure is a list, it is like a vector in that it is 1-dimensional. However, the list can contain any combination of data types within itself, even another list. list(1, &quot;a&quot;, 1.5) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] 1.5 Not only can you put different data types into a list, you can also put a data data structure into one element of a list. In the list below, the first element is a vector that contains 3 numbers, the second element is a character and the third element is a data frame that has two columns. list( c(1, 2, 3), c(&quot;words&quot;, &quot;letters&quot;), data.frame( column1 = c(1, 2, 3), column2 = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) ) ) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;words&quot; &quot;letters&quot; ## ## [[3]] ## column1 column2 ## 1 1 a ## 2 2 b ## 3 3 c The output can often help you understand how the list is structured. The double brackets (e.g. [[1]]) signifies an element of the list and which index it is at. Underneath the [[1]] and [[2]], there is a [1] - this indicates that the first and second elements both contain a vector. Underneath [[3]] you see the standard output for a data frame, which we have seen before. You can have a list as an element of a list, so this can extend into a hierarchical structure resembling folders in a computer. list(1, list(1,&quot;a&quot;)) ## [[1]] ## [1] 1 ## ## [[2]] ## [[2]][[1]] ## [1] 1 ## ## [[2]][[2]] ## [1] &quot;a&quot; The first element, indicated by [[1]], is a vector, indicated by the [1] underneath. The second element, indicated by the first [[2]] contains a list: [[2]][[1]] - tells you that the second element is a list, of which the first element of the inner list is the number 1. [[2]][[2]] - tells you that the second element is a list, of which the second element of the inner list is “a”. Many Bioconductor packages, including limma, use lists so it is an important data structure to understand. Challenge 3.1 3.2.1 Indexing lists We can access elements of a list using square brackets. You may have noticed that there are often double square brackets [[]]. There is a subtle but important difference between single square brackets and double square brackets when subsetting lists. Single brackets [] will return a list. Double brackets [[]] will return elements of the list. To demonsterate, let’s make a list: my_list &lt;- list( c(&quot;a&quot;, &quot;b&quot;), c(1, 2, 3), c(4, 5, 6) ) Take a look at the output of obtaining the first element with single square brackets and double square brackets: my_list[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; class(my_list[1]) ## [1] &quot;list&quot; my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; class(my_list[[1]]) ## [1] &quot;character&quot; The difference is minor; with my_list[1] there is an extra [[1]] at the top, with my_list[[1]] there is no [[1]] at the top. Using single brackets is taking a subset of the list, but still as a list structure, while using double brackets unwraps the value from within the list. The str() function gives us some more information: str(my_list[1]) ## List of 1 ## $ : chr [1:2] &quot;a&quot; &quot;b&quot; str(my_list[[1]]) ## chr [1:2] &quot;a&quot; &quot;b&quot; This tells us that when you use single brackets, the output is a list containing one element, which is a vector. When you use double brackets, the output is just a vector, not contained within a list. 3.2.2 Chaining list indices Because of the hierarchical or folder-like nature of lists, you may have to index multiple times to get to the value you want. To do this we can chain indexes together, they are applied from left to right. my_list[[1]] ## [1] &quot;a&quot; &quot;b&quot; my_list[[1]][1] ## [1] &quot;a&quot; 3.2.3 Named list Traversing a list using numeric indices can get very confusing very quickly. It is easy to make mistakes and code containing only numeric indices becomes extremely difficult to decipher. So often it is wise to create named lists, where each element has name that will help with context on the values stored. named_list &lt;- list( name = c(&quot;Andy&quot;, &quot;Sally&quot;), age = c(32, 40) ) named_list ## $name ## [1] &quot;Andy&quot; &quot;Sally&quot; ## ## $age ## [1] 32 40 If your list is named, you can use $ or a character value to access elements. The following two approaches are identical. named_list$name ## [1] &quot;Andy&quot; &quot;Sally&quot; named_list[[&quot;name&quot;]] ## [1] &quot;Andy&quot; &quot;Sally&quot; 3.3 Classes Everything in R is an ‘object’, each object falls under a ‘class’. A class defines the properties an object and determines what can be done with it. These are analogous to file formats of regular files on the computer. We have seen the basic classes of objects such as character, numerics and logicals. Bioconductor packages often define their own classes in order to represent more complex data. For example, the limma package uses the DGEList class. This is a class that is designed for storing read count data from RNA sequencing. It is a special ‘list’ that must contain two components: counts - which must be a numeric matrix, that stores counts. Each row must be a gene and each column must be a sample. samples - which must be a data frame, that contains information about each sample. Each row must be a sample and must contain information about the group (e.g. treatment group) the sample belongs to, the library size of that sample and the normalisation factor for that sample. There are also a number of optional components of the DGEList class, such as a data frame containing gene annotation information. The main purpose of having a special class rather than just a regular list is to guarantee specific properties on the data. For example the samples data frame must have the same number of rows as the counts matrix has columns. These constraints allow methods developers to create functions with confidence in what data is present within the objects. 3.4 Packages In addition to the functional included in a vanilla R installation, an enormous amount of functionality exists in external packages that can be installed using install.packages() function or via the ‘Packages’ tab. Note that install.packages() will only find packages in the default CRAN repository. Most Bioinformatics softwares are in a separate repository called Bioconductor, packages from Bioconductor can be installed through the ‘BiocManager’ package. To do this you first need to install ‘BiocManager’ from CRAN, then we can use it to install the Bioconductor packages ‘limma’ and ‘edgeR’. install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;limma&quot;, &quot;edgeR&quot;)) Once a package is installed, you can load it in the make all the functions within available. This is done using the ‘library’ function. Note that quotation marks are not required around the package name, this is a rare behaviour granted to the library function to save some typing because it’s so commonly used. library(edgeR) ## Loading required package: limma library(limma) 3.4.1 DGEList The RNA sequencing analysis we will go through is a simplified version of that performed in the article from Law et al. (Law et al. 2016). The RNA sequencing data we will use is from Sheridan et al. (Sheridan et al. 2015). It consists of 9 samples from 3 cell populations; basal, luminal progenitor (LP) and mature luminal (ML), which has been sorted from the mammary glands of female virgin mice. The reads have been aligned to the mouse reference genome (mm10) and reads summarised at the gene-level (using mm10 RefSeq-based annotation) to obtain gene counts. Gene level summarisation involves counting the number of reads mapped to each gene, for each sample. The resulting ‘count of reads’ is often referred to simply as ‘counts’. Each data file corresponds to one sample and thus there is one data file for each sample. Each data file details the number of reads mapped to every gene for the sample corresponding to that data file. Within each data file, there are 3 columns - ‘EntrezID’, ‘GeneLength’ and ‘Count.’ ‘EntrezID’ and ‘GeneLength’ gives the EntrezID and gene length of one gene and ‘Count’ gives the number of reads mapped to that gene. The first four lines of one file (and thus one sample) is shown below: EntrezID GeneLength Count 497097 3634 2 100503874 3259 0 100038431 1634 0 19888 9747 1 We will be looking at 9 samples (and using 9 data files) in total. Their details are shown below: Table 3.1: Summary of samples. File name Sample name Phenotype group GSM1545535_10_6_5_11.txt 10_6_5_11 LP GSM1545536_9_6_5_11.txt 9_6_5_11 ML GSM1545538_purep53.txt purep53 Basal GSM1545539_JMS8-2.txt JMS8-2 Basal GSM1545540_JMS8-3.txt JMS8-3 ML GSM1545541_JMS8-4.txt JMS8-4 LP GSM1545542_JMS8-5.txt JMS8-5 Basal GSM1545544_JMS9-P7c.txt JMS9-P7c ML GSM1545545_JMS9-P8c.txt JMS9-P8c LP To create a DGEList object, we will use the readDGE() function. There are three important arguments to this function: files - a vector of data file names path - the path to the directory that contains your data files. If the data files are in your working directory, don’t worry about this argument. If the data files are somewhere else, like a folder called ‘data’, in your working directory you must give the path to that folder colums - the columns of the input files which have the gene names and counts respectively (as the column indices) First, we will create a vector of the file names. You can simply copy and paste this code into your R script. files &lt;- c( &quot;GSM1545535_10_6_5_11.txt&quot;, &quot;GSM1545536_9_6_5_11.txt&quot;, &quot;GSM1545538_purep53.txt&quot;, &quot;GSM1545539_JMS8-2.txt&quot;, &quot;GSM1545540_JMS8-3.txt&quot;, &quot;GSM1545541_JMS8-4.txt&quot;, &quot;GSM1545542_JMS8-5.txt&quot;, &quot;GSM1545544_JMS9-P7c.txt&quot;, &quot;GSM1545545_JMS9-P8c.txt&quot; ) Next, we will create our DGEList object. I have put my data files in a folder called “data” (within my working directory). Thus, I must specify path = \"data\". Depending on where you have put your data files, you may need a different input to path or not have to include the path argument (if your data files are NOT within a folder in your working directory). x &lt;- readDGE(files, path = &quot;data/counts&quot;, columns = c(1,3)) The readDGE() function uses the read counts from our 9 data files (and thus 9 samples) to create a DGEList object containing count information for all 9 samples and every gene included in our data files. It has 2 elements, one named samples and one named counts. For small enough matrices, if you are using RStudio, you can take a look at each using View(): View(x$counts) Note that the column names are the file names. The DGEList object was created using the information in the “.txt” files. The function readDGE() has used the file name as the name of each sample because we have not told readDGE() what the sample names are. It has therefore simply used the file names. This makes logical sense as each file contained the count data for one sample. The samples data frame can also be viewed: View(x$samples) The output should look something like this: Figure 3.1: View of the samples data frame from the DGEList object we created and called x. This is a data frame where each row is 1 sample, and details of each sample is given in the 4 columns. files gives the file names. group details the phenotype group the sample belongs to. As we have not specified this yet, the default 1 is given for each sample. lib.size gives the library size. This is the total sum of all counts for that sample. norm.factors this gives the normalisation factor for each sample. As we have not calculated any normalisation factors, this is 1 for each sample. This data frame also has row names, which are currently the file names of each sample. Again, because we have not told readDGE() what the sample names are, it has used the file names. Let’s change the row names to be the sample names, instead of the full file name (see Table 3.1). We can do this by first creating a vector of sample names. You can simply copy and paste the code below into your R script. samplenames &lt;- c(&quot;10_6_5_11&quot;, &quot;9_6_5_11&quot;, &quot;purep53&quot;, &quot;JMS8-2&quot;, &quot;JMS8-3&quot;, &quot;JMS8-4&quot;, &quot;JMS8-5&quot;, &quot;JMS9-P7c&quot;, &quot;JMS9-P8c&quot;) We can change the row names in the samples data frame using the rownames() function. This function will give you the row names of a data structure (a data frame in this instance): rownames(x$samples) ## [1] &quot;GSM1545535_10_6_5_11&quot; &quot;GSM1545536_9_6_5_11&quot; &quot;GSM1545538_purep53&quot; ## [4] &quot;GSM1545539_JMS8-2&quot; &quot;GSM1545540_JMS8-3&quot; &quot;GSM1545541_JMS8-4&quot; ## [7] &quot;GSM1545542_JMS8-5&quot; &quot;GSM1545544_JMS9-P7c&quot; &quot;GSM1545545_JMS9-P8c&quot; We can see that the row names are the file names as we saw above. To replace these file names with the sample names we can run: rownames(x$samples) &lt;- samplenames "]
]
